Schemagen plugin for Maven

    Ian Dickinson, i.j.dickinson@gmail.com\
    2010-03-28

    This plugin allows Java source files containing the concepts from
an ontology as Java constants to be generated directly from the
RDF source file. The Jena
{{{http://jena.sourceforge.net/how-to/schemagen.html}schemagen}} tool
exists to do this job;
this project is simply a wrapper to allow Jena's schemagen to be
run as a Maven plugin.

* Basic principles

    The plugin is controlled through parameters in the <<<configuration>>> section
    of the project <<<pom.xml>>>. The files to include are specified by an
    <<<includes>>> element, which defaults to <<<src/main/vocabs/*>>>. Files may
    be excluded from processing by a pattern specified in an <<<excludes>>> element.

    Schemagen has a large number of options for each vocabulary generated. These options
    allow users to control what gets generated in the Java file, where the output is
    sent to, and how the Java file is formatted. All of schemagen's options are available
    through the plugin.

    While schemagen itself is optimised for processing one vocabulary file into one
    Java source file, the Maven schemagen plugin is typically used to process a number
    of files. By default, this will be all files in the path <<<src/main/vocab>>>. In
    this scenario, where the plugin is processing more than one file during one generation
    phase, it would be tedious and non-scalable to specify individual schemagen options
    for each file that matches the <<<includes>>> pattern. Consequently, the plugin allows
    default configuration settings to be set once, and subsequently overridden, where
    necessary, by per-file options.

    Within the <<<configuration>>> XML element of the <<<pom.xml>>>, a list of input
    source options is given by the nested element <<<fileOptions>>>. Each child element of the
    <<<fileOptions>>> list is a <<<source>>> element, corresponding to a single source
    input file. However, the reserved file name <<<default>>> corresponds to default
    schemagen options that are applied to all of the vocabulary files specified by the
    combination of <<<includes>>> and <<<excludes>>> parameter values.

* Example configurations

    The following complete <<<pom.xml>>> configuration will process all <<<*.ttl>>> files
    in <<<src/main/vocabs>>>, and put them all of the generated output
    into the Java package <<<org.example.test>>>:

--------------------------------
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.openjena.tools</groupId>
          <artifactId>schemagen-example</artifactId>
          <packaging>jar</packaging>
          <version>0.0.1-SNAPSHOT</version>
          <name>schemagen-example</name>
          <url>http://maven.apache.org</url>
          <build>
            <plugins>
              <plugin>
                <groupId>org.openjena.tools</groupId>
                <artifactId>schemagen</artifactId>
                <version>${version}</version>
                <configuration>
                  <includes>
                    <include>src/main/vocabs/*.ttl</include>
                  </includes>
                  <fileOptions>
                    <source>
                      <input>default</input>
                      <package-name>org.example.test</package-name>
                    </source>
                  </fileOptions>
                </configuration>
                <executions>
                  <execution>
                    <id>schemagen</id>
                    <goals>
                      <goal>translate</goal>
                    </goals>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
          <dependencies>
            <dependency>
              <groupId>org.openjena.tools</groupId>
              <artifactId>schemagen</artifactId>
              <version>${version}</version>
              <type>maven-plugin</type>
              <scope>compile</scope>
            </dependency>
          </dependencies>
        </project>
--------------------------------

     The following partial configuration shows how to pass additional schemagen configuration options,
     and how to specify an option for one file that does not apply to the default selection:

--------------------------------
        <configuration>
          <includes>
            <include>src/main/vocabs/*.ttl</include>
          </includes>
          <fileOptions>
            <source>
              <input>default</input>
              <package-name>org.example.test</package-name>
            </source>
            <source>
              <!-- Test2.java (only) will contain OntModel declarations -->
              <input>src/main/vocabs/test2.ttl</input>
              <ontology>true</ontology>
            </source>
          </fileOptions>
        </configuration>
--------------------------------
