/* Generated By:JavaCC: Do not edit this line. ShExJavaccConstants.java */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.shex.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ShExJavaccConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BOM = 12;
  /** RegularExpression Id. */
  int RDF_TYPE = 13;
  /** RegularExpression Id. */
  int BASE = 14;
  /** RegularExpression Id. */
  int IMPORT = 15;
  /** RegularExpression Id. */
  int PREFIX = 16;
  /** RegularExpression Id. */
  int SHAPE_CLASS = 17;
  /** RegularExpression Id. */
  int SHAPE = 18;
  /** RegularExpression Id. */
  int START = 19;
  /** RegularExpression Id. */
  int EXTERNAL = 20;
  /** RegularExpression Id. */
  int FOCUS = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int AND = 24;
  /** RegularExpression Id. */
  int LITERAL = 25;
  /** RegularExpression Id. */
  int IRI = 26;
  /** RegularExpression Id. */
  int BNODE = 27;
  /** RegularExpression Id. */
  int NONLITERAL = 28;
  /** RegularExpression Id. */
  int LENGTH = 29;
  /** RegularExpression Id. */
  int MINLENGTH = 30;
  /** RegularExpression Id. */
  int MAXLENGTH = 31;
  /** RegularExpression Id. */
  int MININCLUSIVE = 32;
  /** RegularExpression Id. */
  int MINEXCLUSIVE = 33;
  /** RegularExpression Id. */
  int MAXINCLUSIVE = 34;
  /** RegularExpression Id. */
  int MAXEXCLUSIVE = 35;
  /** RegularExpression Id. */
  int TOTALDIGITS = 36;
  /** RegularExpression Id. */
  int FRACTIONDIGITS = 37;
  /** RegularExpression Id. */
  int CLOSED = 38;
  /** RegularExpression Id. */
  int EXTRA = 39;
  /** RegularExpression Id. */
  int CODE_BLOCK = 40;
  /** RegularExpression Id. */
  int REPEAT_RANGE = 41;
  /** RegularExpression Id. */
  int TRUE = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int HEX = 44;
  /** RegularExpression Id. */
  int PLUS = 45;
  /** RegularExpression Id. */
  int MINUS = 46;
  /** RegularExpression Id. */
  int VBAR = 47;
  /** RegularExpression Id. */
  int AT = 48;
  /** RegularExpression Id. */
  int CARAT = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int BANG = 51;
  /** RegularExpression Id. */
  int QMARK = 52;
  /** RegularExpression Id. */
  int SLASH = 53;
  /** RegularExpression Id. */
  int STAR = 54;
  /** RegularExpression Id. */
  int EQUALS = 55;
  /** RegularExpression Id. */
  int LPAREN = 56;
  /** RegularExpression Id. */
  int RPAREN = 57;
  /** RegularExpression Id. */
  int LBRACE = 58;
  /** RegularExpression Id. */
  int RBRACE = 59;
  /** RegularExpression Id. */
  int LBRACKET = 60;
  /** RegularExpression Id. */
  int RBRACKET = 61;
  /** RegularExpression Id. */
  int PERCENT_CHAR = 62;
  /** RegularExpression Id. */
  int COMMA = 63;
  /** RegularExpression Id. */
  int USCORE = 64;
  /** RegularExpression Id. */
  int SEMI_COLON = 65;
  /** RegularExpression Id. */
  int DOLLAR = 66;
  /** RegularExpression Id. */
  int TILDE = 67;
  /** RegularExpression Id. */
  int AMP = 68;
  /** RegularExpression Id. */
  int UCHAR = 69;
  /** RegularExpression Id. */
  int IRIref = 70;
  /** RegularExpression Id. */
  int PNAME_NS = 71;
  /** RegularExpression Id. */
  int PNAME_LN = 72;
  /** RegularExpression Id. */
  int ATPNAME_NS = 73;
  /** RegularExpression Id. */
  int ATPNAME_LN = 74;
  /** RegularExpression Id. */
  int ATSTART = 75;
  /** RegularExpression Id. */
  int QUOTE_3D = 76;
  /** RegularExpression Id. */
  int QUOTE_3S = 77;
  /** RegularExpression Id. */
  int ECHAR = 78;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 79;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 80;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 81;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 82;
  /** RegularExpression Id. */
  int LANG_STRING_LITERAL1 = 83;
  /** RegularExpression Id. */
  int LANG_STRING_LITERAL2 = 84;
  /** RegularExpression Id. */
  int LANG_STRING_LITERAL_LONG1 = 85;
  /** RegularExpression Id. */
  int LANG_STRING_LITERAL_LONG2 = 86;
  /** RegularExpression Id. */
  int DIGITS = 87;
  /** RegularExpression Id. */
  int INTEGER = 88;
  /** RegularExpression Id. */
  int DECIMAL = 89;
  /** RegularExpression Id. */
  int DOUBLE = 90;
  /** RegularExpression Id. */
  int EXPONENT = 91;
  /** RegularExpression Id. */
  int REGEXP = 92;
  /** RegularExpression Id. */
  int BLANK_NODE_LABEL = 93;
  /** RegularExpression Id. */
  int LANGTAG = 94;
  /** RegularExpression Id. */
  int A2Z = 95;
  /** RegularExpression Id. */
  int A2ZN = 96;
  /** RegularExpression Id. */
  int SURROGATE_PAIR = 97;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 98;
  /** RegularExpression Id. */
  int PN_CHARS_U = 99;
  /** RegularExpression Id. */
  int PN_CHARS = 100;
  /** RegularExpression Id. */
  int PN_PREFIX = 101;
  /** RegularExpression Id. */
  int PN_LOCAL = 102;
  /** RegularExpression Id. */
  int VARNAME = 103;
  /** RegularExpression Id. */
  int PN_LOCAL_ESC = 104;
  /** RegularExpression Id. */
  int PLX = 105;
  /** RegularExpression Id. */
  int PERCENT = 106;
  /** RegularExpression Id. */
  int UNKNOWN = 107;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"//\"",
    "\"^^\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 8>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"\\ufeff\"",
    "\"a\"",
    "\"BASE\"",
    "\"IMPORT\"",
    "\"PREFIX\"",
    "\"shapeClass\"",
    "\"shape\"",
    "\"start\"",
    "\"external\"",
    "\"focus\"",
    "\"not\"",
    "\"or\"",
    "\"and\"",
    "\"literal\"",
    "\"iri\"",
    "\"bnode\"",
    "\"nonliteral\"",
    "\"length\"",
    "\"minlength\"",
    "\"maxlength\"",
    "\"mininclusive\"",
    "\"minexclusive\"",
    "\"maxinclusive\"",
    "\"maxexclusive\"",
    "\"totaldigits\"",
    "\"fractiondigits\"",
    "\"closed\"",
    "\"extra\"",
    "<CODE_BLOCK>",
    "<REPEAT_RANGE>",
    "\"true\"",
    "\"false\"",
    "<HEX>",
    "\"+\"",
    "\"-\"",
    "\"|\"",
    "\"@\"",
    "\"^\"",
    "\".\"",
    "\"!\"",
    "\"?\"",
    "\"/\"",
    "\"*\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"%\"",
    "\",\"",
    "\"_\"",
    "\";\"",
    "\"$\"",
    "\"~\"",
    "\"&\"",
    "<UCHAR>",
    "<IRIref>",
    "<PNAME_NS>",
    "<PNAME_LN>",
    "<ATPNAME_NS>",
    "<ATPNAME_LN>",
    "<ATSTART>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<LANG_STRING_LITERAL1>",
    "<LANG_STRING_LITERAL2>",
    "<LANG_STRING_LITERAL_LONG1>",
    "<LANG_STRING_LITERAL_LONG2>",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<EXPONENT>",
    "<REGEXP>",
    "<BLANK_NODE_LABEL>",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "<SURROGATE_PAIR>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<VARNAME>",
    "<PN_LOCAL_ESC>",
    "<PLX>",
    "<PERCENT>",
    "<UNKNOWN>",
  };

}
