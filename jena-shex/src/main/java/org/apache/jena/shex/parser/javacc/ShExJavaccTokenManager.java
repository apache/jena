/* ShExJavaccTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ShExJavaccTokenManager.java */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.shex.parser.javacc;

/** Token Manager. */
public class ShExJavaccTokenManager implements ShExJavaccConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 36:
         jjmatchedKind = 66;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 62;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 57;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 54;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 45;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 63;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 46;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x202L);
      case 59:
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      case 63:
         jjmatchedKind = 52;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 48;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8004000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000100000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x82000200000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4008000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x22000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xfc0000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10400000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xe0000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x41000000000L);
      case 91:
         jjmatchedKind = 60;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 61;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 95:
         jjmatchedKind = 64;
         return jjMoveNfa_0(0, 0);
      case 97:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8004000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000100000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x82000200000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4008000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x22000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xfc0000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10400000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe0000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x41000000000L);
      case 123:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 59;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 67;
         return jjMoveNfa_0(0, 0);
      case 65279:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80c80004000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x342000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010600000L);
      case 82:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x42004010000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100000L);
      case 94:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80c80004000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x342000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010600000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x42004010000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000e0000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 73:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x370000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9002100000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0xc80000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000e0000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x370000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9002100000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0xc80000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa02100000L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0xd0000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa02100000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xd0000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40c0020000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2108000L);
      case 83:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         break;
      case 84:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2020000000L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000L);
      case 97:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40c0020000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10010000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2108000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2020000000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0xf00020000L);
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 72:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0100000L);
      case 84:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 88:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0xf00020000L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0100000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 120:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 76:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xf00020000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xf00020000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 76:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0xf00000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0xf00000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 72:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0xf00020000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0xf00020000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x2f00000000L);
      case 76:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 9;
         }
         break;
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2f00000000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 9;
         }
         break;
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 10;
         }
         break;
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0xf00000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 10;
         }
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0xf00000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 13;
         }
         break;
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0xf000000L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0xf0000000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 414;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(395, 397); }
                  else if (curChar == 34)
                     { jjAddStates(12, 13); }
                  else if (curChar == 39)
                     { jjAddStates(14, 15); }
                  else if (curChar == 58)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAddStates(16, 19); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(106, 109); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(20, 22); }
                  else if (curChar == 37)
                     { jjCheckNAddStates(23, 27); }
                  else if (curChar == 35)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 34)
                     { jjCheckNAddStates(28, 33); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 37)
                     { jjCheckNAddStates(23, 27); }
                  break;
               case 3:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(23, 27); }
                  break;
               case 4:
                  if (curChar == 60)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 5:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 12:
                  if (curChar == 62)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 13:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 15:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 16:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 37)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 37 && kind > 40)
                     kind = 40;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(49, 51); }
                  break;
               case 42:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if (curChar == 58)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 44:
                  if ((0x7ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 45:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 46:
                  if ((0x7ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 50:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 51:
                  if (curChar == 37)
                     { jjCheckNAddTwoStates(52, 54); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 56:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 58:
                  if (curChar != 37)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(52, 54); }
                  break;
               case 60:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 61:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 69:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(68, 70); }
                  break;
               case 70:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if (curChar == 58)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 78:
                  if (curChar == 58)
                     { jjCheckNAddStates(71, 77); }
                  break;
               case 80:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(81); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(78, 80); }
                  break;
               case 82:
                  if (curChar == 44)
                     { jjCheckNAddStates(81, 84); }
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(84); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 86:
                  if (curChar == 42)
                     { jjCheckNAdd(85); }
                  break;
               case 87:
                  if (curChar == 60)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 88:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 95:
                  if (curChar == 62 && kind > 70)
                     kind = 70;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x8400000000L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 105:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(106, 109); }
                  break;
               case 106:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 107:
                  if (curChar != 47)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x8000ef1000000000L & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 123:
                  if (curChar == 58)
                     { jjAddStates(88, 89); }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(90, 92); }
                  break;
               case 125:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 126:
                  if ((0x3ff200000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 134:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(93, 95); }
                  break;
               case 135:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if (curChar == 58 && kind > 71)
                     kind = 71;
                  break;
               case 140:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(96, 98); }
                  break;
               case 141:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 142:
                  if (curChar == 58)
                     { jjCheckNAddStates(16, 19); }
                  break;
               case 143:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 144:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 145:
                  if ((0x7ff200000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 149:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 150:
                  if (curChar == 37)
                     { jjAddStates(104, 105); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 155:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 158:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 159:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 170:
                  if (curChar != 58)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(16, 19); }
                  break;
               case 173:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(106, 108); }
                  break;
               case 174:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 175:
                  if (curChar == 58)
                     { jjAddStates(109, 112); }
                  break;
               case 176:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 177:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 178:
                  if ((0x7ff200000000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 182:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 183:
                  if (curChar == 37)
                     { jjAddStates(118, 119); }
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 188:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 191:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 192:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 203:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(120, 122); }
                  break;
               case 204:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 205:
                  if (curChar == 58 && kind > 74)
                     kind = 74;
                  break;
               case 217:
                  if (curChar == 45)
                     { jjCheckNAdd(218); }
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(217, 218); }
                  break;
               case 219:
                  if (curChar == 39)
                     { jjCheckNAddStates(34, 39); }
                  break;
               case 220:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 221:
                  if (curChar == 39 && kind > 79)
                     kind = 79;
                  break;
               case 223:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 227:
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 236:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 237:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 45)
                     { jjCheckNAdd(241); }
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(240, 241); }
                  break;
               case 243:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 245:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 247:
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(248); }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 251:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 256:
                  if (curChar == 34)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 257:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 258:
                  if (curChar == 34 && kind > 80)
                     kind = 80;
                  break;
               case 260:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 262:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 264:
               case 272:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(265); }
                  break;
               case 265:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 266:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 267:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 270:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 271:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 273:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 274:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 45)
                     { jjCheckNAdd(278); }
                  break;
               case 278:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(277, 278); }
                  break;
               case 280:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 282:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 284:
               case 292:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(285); }
                  break;
               case 285:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 286:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 287:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 288:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 289:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 290:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 291:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 293:
                  if (curChar == 39)
                     { jjAddStates(14, 15); }
                  break;
               case 294:
                  if (curChar == 39)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 295:
               case 298:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(296, 299); }
                  break;
               case 296:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 297:
                  if (curChar == 39)
                     { jjAddStates(139, 140); }
                  break;
               case 300:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 302:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 304:
               case 312:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 305:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 307:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 310:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 311:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 313:
                  if (curChar == 39 && kind > 81)
                     kind = 81;
                  break;
               case 314:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 316:
                  if (curChar == 39)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 317:
               case 320:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(318, 321); }
                  break;
               case 318:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 319:
                  if (curChar == 39)
                     { jjAddStates(145, 146); }
                  break;
               case 322:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 324:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 325:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 326:
               case 334:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(327); }
                  break;
               case 327:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 328:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 329:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 330;
                  break;
               case 330:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 331:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 332;
                  break;
               case 332:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 333:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 335:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 336;
                  break;
               case 338:
                  if (curChar == 45)
                     { jjCheckNAdd(339); }
                  break;
               case 339:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 340:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 341:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 342:
                  if (curChar == 34)
                     { jjAddStates(12, 13); }
                  break;
               case 343:
                  if (curChar == 34)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 344:
               case 347:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(345, 348); }
                  break;
               case 345:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 346:
                  if (curChar == 34)
                     { jjAddStates(151, 152); }
                  break;
               case 349:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 351:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 352:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 353;
                  break;
               case 353:
               case 361:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(354); }
                  break;
               case 354:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 355:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 356:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 357:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 358:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 359:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 360:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 361;
                  break;
               case 362:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 363:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 362;
                  break;
               case 364:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 365:
                  if (curChar == 34)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 366:
               case 369:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(367, 370); }
                  break;
               case 367:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 368:
                  if (curChar == 34)
                     { jjAddStates(157, 158); }
                  break;
               case 371:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 373:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 375:
               case 383:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(376); }
                  break;
               case 376:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 377:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 378:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 379:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 380:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 381:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 382:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 384:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 385;
                  break;
               case 387:
                  if (curChar == 45)
                     { jjCheckNAdd(388); }
                  break;
               case 388:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(387, 388); }
                  break;
               case 389:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 384;
                  break;
               case 390:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 391:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 392:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(392); }
                  break;
               case 393:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(393, 394); }
                  break;
               case 394:
                  if (curChar == 46)
                     { jjCheckNAdd(395); }
                  break;
               case 395:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(395); }
                  break;
               case 396:
                  if (curChar == 46)
                     { jjCheckNAdd(397); }
                  break;
               case 397:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(397, 398); }
                  break;
               case 399:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(400); }
                  break;
               case 400:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(400); }
                  break;
               case 401:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(159, 162); }
                  break;
               case 402:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(402, 403); }
                  break;
               case 403:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(404, 405); }
                  break;
               case 404:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(404, 405); }
                  break;
               case 406:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(407); }
                  break;
               case 407:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(407); }
                  break;
               case 408:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(408, 409); }
                  break;
               case 410:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(411); }
                  break;
               case 411:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(411); }
                  break;
               case 412:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 413:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(395, 397); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(163, 170); }
                  else if (curChar == 64)
                     { jjCheckNAddStates(171, 178); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 123;
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 123)
                     { jjAddStates(179, 180); }
                  break;
               case 1:
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 6:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(181, 182); }
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 14:
                  if (curChar == 123)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 17:
                  if (curChar == 125 && kind > 40)
                     kind = 40;
                  break;
               case 18:
                  if (curChar == 92)
                     { jjAddStates(183, 184); }
                  break;
               case 19:
                  if (curChar == 92)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 20:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(185, 186); }
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(187, 194); }
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(43); }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 49:
                  if (curChar == 92)
                     { jjAddStates(195, 196); }
                  break;
               case 50:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 56:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 59:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(71); }
                  break;
               case 79:
                  if (curChar == 123)
                     { jjAddStates(179, 180); }
                  break;
               case 85:
                  if (curChar == 125 && kind > 41)
                     kind = 41;
                  break;
               case 88:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 89:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(197, 198); }
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
               case 102:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 103:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x14404410144044L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 106:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 108:
                  if ((0x108220001082200L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 109:
                  if (curChar == 92)
                     { jjAddStates(199, 200); }
                  break;
               case 110:
                  if ((0x3814400078144000L & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 111:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(201, 202); }
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
               case 122:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(90, 92); }
                  break;
               case 125:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 126:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 132:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 133:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(163, 170); }
                  break;
               case 134:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(136); }
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(96, 98); }
                  break;
               case 141:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(142); }
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 144:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 148:
                  if (curChar == 92)
                     { jjAddStates(203, 204); }
                  break;
               case 149:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 155:
                  if ((0x4000000080000001L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 157:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 158:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 160:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 171:
                  if (curChar == 64)
                     { jjCheckNAddStates(171, 178); }
                  break;
               case 172:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(205, 208); }
                  break;
               case 173:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(106, 108); }
                  break;
               case 174:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(175); }
                  break;
               case 176:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 177:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 178:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 181:
                  if (curChar == 92)
                     { jjAddStates(209, 210); }
                  break;
               case 182:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 184:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 185:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 186:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 188:
                  if ((0x4000000080000001L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 190:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 191:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 193:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 194:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 202:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(211, 214); }
                  break;
               case 203:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(120, 122); }
                  break;
               case 204:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(205); }
                  break;
               case 211:
                  if ((0x10000000100000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 212:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(216, 217); }
                  break;
               case 218:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(217, 218); }
                  break;
               case 220:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 222:
                  if (curChar == 92)
                     { jjAddStates(215, 216); }
                  break;
               case 223:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 224:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(217, 218); }
                  break;
               case 225:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 227:
               case 235:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 228:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 229:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 236:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 238:
                  if (curChar == 64)
                     { jjCheckNAdd(239); }
                  break;
               case 239:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(239, 240); }
                  break;
               case 241:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(240, 241); }
                  break;
               case 242:
                  if (curChar == 92)
                     { jjAddStates(219, 220); }
                  break;
               case 243:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 244:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(221, 222); }
                  break;
               case 245:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 246:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 247:
               case 255:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(248); }
                  break;
               case 248:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 249:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 250:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 251:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 252:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 253:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 259:
                  if (curChar == 92)
                     { jjAddStates(223, 224); }
                  break;
               case 260:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 261:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(225, 226); }
                  break;
               case 262:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 263:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 264:
               case 272:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(265); }
                  break;
               case 265:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(129, 131); }
                  break;
               case 266:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 267:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 268:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 269:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 270:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 271:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 273:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 275:
                  if (curChar == 64)
                     { jjCheckNAdd(276); }
                  break;
               case 276:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(276, 277); }
                  break;
               case 278:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(277, 278); }
                  break;
               case 279:
                  if (curChar == 92)
                     { jjAddStates(227, 228); }
                  break;
               case 280:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 281:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(229, 230); }
                  break;
               case 282:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 284:
               case 292:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(285); }
                  break;
               case 285:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 286:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 287:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 288:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 289:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 290:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 291:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 296:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 299:
                  if (curChar == 92)
                     { jjAddStates(231, 232); }
                  break;
               case 300:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 301:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(233, 234); }
                  break;
               case 302:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 303:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 304:
               case 312:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 305:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(135, 138); }
                  break;
               case 306:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 307:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 308:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 309:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 310:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 311:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 318:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 321:
                  if (curChar == 92)
                     { jjAddStates(235, 236); }
                  break;
               case 322:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 323:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(237, 238); }
                  break;
               case 324:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 325:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 326:
               case 334:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(327); }
                  break;
               case 327:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(141, 144); }
                  break;
               case 328:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 329:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 330;
                  break;
               case 330:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 331:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 332;
                  break;
               case 332:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 333:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 336:
                  if (curChar == 64)
                     { jjCheckNAdd(337); }
                  break;
               case 337:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 339:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 345:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 348:
                  if (curChar == 92)
                     { jjAddStates(239, 240); }
                  break;
               case 349:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 350:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(241, 242); }
                  break;
               case 351:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 352:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 353;
                  break;
               case 353:
               case 361:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(354); }
                  break;
               case 354:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(147, 150); }
                  break;
               case 355:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 356:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 357:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 358:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 359:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 360:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 361;
                  break;
               case 367:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 370:
                  if (curChar == 92)
                     { jjAddStates(243, 244); }
                  break;
               case 371:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 372:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(245, 246); }
                  break;
               case 373:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 375:
               case 383:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(376); }
                  break;
               case 376:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(153, 156); }
                  break;
               case 377:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 378:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 379:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 380:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 381:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 382:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 385:
                  if (curChar == 64)
                     { jjCheckNAdd(386); }
                  break;
               case 386:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 388:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(387, 388); }
                  break;
               case 398:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(247, 248); }
                  break;
               case 405:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(249, 250); }
                  break;
               case 409:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(251, 252); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(163, 170); }
                  if (jjCanMove_33(hiByte, i1, i2, l1, l2))
                     { jjAddStates(253, 254); }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(40, 42); }
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(46, 48); }
                  break;
               case 40:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(187, 194); }
                  break;
               case 41:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 42:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(43); }
                  break;
               case 44:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 45:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 47:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(255, 256); }
                  break;
               case 48:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 57:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 64:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(56, 62); }
                  break;
               case 66:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjAddStates(257, 258); }
                  break;
               case 67:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 68:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(43); }
                  break;
               case 69:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 70:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(71); }
                  break;
               case 72:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjAddStates(259, 260); }
                  break;
               case 73:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 74:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(71); }
                  break;
               case 75:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjAddStates(261, 262); }
                  break;
               case 76:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(263, 266); }
                  break;
               case 77:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(267, 270); }
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 22); }
                  break;
               case 106:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(85, 87); }
                  break;
               case 124:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(90, 92); }
                  break;
               case 125:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 126:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 93)
                     kind = 93;
                  break;
               case 127:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                     { jjAddStates(271, 272); }
                  break;
               case 128:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 129:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 93)
                     kind = 93;
                  break;
               case 130:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if (!jjCanMove_21(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(90, 92); }
                  break;
               case 133:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(163, 170); }
                  break;
               case 134:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 135:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(136); }
                  break;
               case 137:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(273, 274); }
                  break;
               case 138:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 139:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(136); }
                  break;
               case 140:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(96, 98); }
                  break;
               case 141:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(142); }
                  break;
               case 143:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 144:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 145:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 146:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjAddStates(275, 276); }
                  break;
               case 147:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(99, 103); }
                  break;
               case 156:
                  if (jjCanMove_27(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 162:
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 163:
                  if (!jjCanMove_29(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(99, 103); }
                  break;
               case 164:
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2))
                     { jjAddStates(277, 278); }
                  break;
               case 165:
                  if (jjCanMove_31(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(96, 98); }
                  break;
               case 166:
                  if (jjCanMove_32(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(142); }
                  break;
               case 167:
                  if (jjCanMove_33(hiByte, i1, i2, l1, l2))
                     { jjAddStates(253, 254); }
                  break;
               case 168:
                  if (jjCanMove_34(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(279, 282); }
                  break;
               case 169:
                  if (jjCanMove_35(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(283, 286); }
                  break;
               case 172:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(205, 208); }
                  break;
               case 173:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(106, 108); }
                  break;
               case 174:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(175); }
                  break;
               case 176:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 177:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 178:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 179:
                  if (jjCanMove_36(hiByte, i1, i2, l1, l2))
                     { jjAddStates(287, 288); }
                  break;
               case 180:
                  if (jjCanMove_37(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(113, 117); }
                  break;
               case 189:
                  if (jjCanMove_38(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 195:
                  if (jjCanMove_39(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 196:
                  if (!jjCanMove_40(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(113, 117); }
                  break;
               case 197:
                  if (jjCanMove_41(hiByte, i1, i2, l1, l2))
                     { jjAddStates(289, 290); }
                  break;
               case 198:
                  if (jjCanMove_42(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(106, 108); }
                  break;
               case 199:
                  if (jjCanMove_43(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(175); }
                  break;
               case 200:
                  if (jjCanMove_44(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 201:
                  if (jjCanMove_45(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(205, 208); }
                  break;
               case 202:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(211, 214); }
                  break;
               case 203:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(120, 122); }
                  break;
               case 204:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(205); }
                  break;
               case 206:
                  if (jjCanMove_46(hiByte, i1, i2, l1, l2))
                     { jjAddStates(291, 292); }
                  break;
               case 207:
                  if (jjCanMove_47(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(120, 122); }
                  break;
               case 208:
                  if (jjCanMove_48(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(205); }
                  break;
               case 209:
                  if (jjCanMove_49(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 210:
                  if (jjCanMove_50(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(211, 214); }
                  break;
               case 220:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(123, 125); }
                  break;
               case 236:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(126, 128); }
                  break;
               case 257:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(129, 131); }
                  break;
               case 273:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(132, 134); }
                  break;
               case 296:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(135, 138); }
                  break;
               case 318:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(141, 144); }
                  break;
               case 345:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(147, 150); }
                  break;
               case 367:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(153, 156); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 414 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\57\57", "\136\136", null, null, null, null, null, null, null, null, null,
"\ufeff", "\141", null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, "\53", "\55", "\174", "\100", "\136", "\56", "\41",
"\77", "\57", "\52", "\75", "\50", "\51", "\173", "\175", "\133", "\135", "\45",
"\54", "\137", "\73", "\44", "\176", "\46", null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   392, 393, 394, 402, 403, 408, 409, 392, 393, 394, 396, 401, 364, 390, 315, 341,
   143, 157, 159, 162, 88, 89, 95, 3, 4, 40, 75, 78, 257, 258, 273, 274,
   279, 259, 220, 221, 236, 237, 242, 222, 5, 6, 12, 13, 14, 32, 15, 16,
   18, 41, 42, 66, 44, 59, 61, 64, 45, 46, 13, 14, 47, 49, 58, 45,
   46, 47, 49, 51, 69, 70, 72, 44, 59, 61, 64, 13, 14, 32, 81, 82,
   85, 83, 84, 86, 85, 106, 107, 109, 124, 130, 125, 126, 127, 134, 135, 137,
   140, 141, 164, 144, 145, 146, 148, 150, 151, 153, 173, 174, 197, 176, 190, 192,
   195, 177, 178, 179, 181, 183, 184, 186, 203, 204, 206, 220, 221, 222, 236, 237,
   242, 257, 258, 259, 273, 274, 279, 295, 296, 297, 299, 298, 314, 317, 318, 319,
   321, 320, 340, 344, 345, 346, 348, 347, 363, 366, 367, 368, 370, 369, 389, 402,
   403, 408, 409, 134, 135, 136, 140, 141, 142, 164, 137, 172, 200, 175, 202, 209,
   205, 215, 216, 80, 81, 8, 33, 19, 20, 21, 25, 41, 42, 43, 69, 70,
   71, 72, 66, 50, 56, 91, 96, 110, 111, 112, 116, 149, 155, 173, 174, 175,
   197, 182, 188, 203, 204, 205, 206, 223, 224, 225, 229, 243, 244, 245, 249, 260,
   261, 262, 266, 280, 281, 282, 286, 300, 301, 302, 306, 322, 323, 324, 328, 349,
   350, 351, 355, 371, 372, 373, 377, 399, 400, 406, 407, 410, 411, 168, 169, 48,
   57, 67, 68, 73, 74, 76, 77, 41, 42, 43, 66, 69, 70, 71, 72, 128,
   129, 138, 139, 147, 156, 165, 166, 134, 135, 136, 137, 140, 141, 142, 164, 180,
   189, 198, 199, 207, 208,
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_21(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_22(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_23(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_24(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_25(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_26(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_27(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_28(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_29(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_30(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_31(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_32(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_33(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_34(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_35(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_36(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_37(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_38(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_39(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_40(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_41(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_42(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_43(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_44(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_45(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_46(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_47(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_48(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_49(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_50(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken()
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ShExJavaccTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ShExJavaccTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */

  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 414; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)

  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1,
};
static final long[] jjtoToken = {
   0xffffeffffffff007L, 0x777fcfdfL,
};
static final long[] jjtoSkip = {
   0xff8L, 0x0L,
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L,
};
static final long[] jjtoMore = {
   0x0L, 0x0L,
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[414];
    private final int[] jjstateSet = new int[2 * 414];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
