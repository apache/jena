/* SSE_ParserCoreTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SSE_ParserCoreTokenManager.java */
package org.apache.jena.sparql.sse.lang.parser ;
import org.apache.jena.sparql.sse.lang.ParserSSEBase ;
import static org.apache.jena.riot.lang.extra.LangParserLib.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SSE_ParserCoreTokenManager implements SSE_ParserCoreConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200L) != 0L)
            return 184;
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 51;
            return 156;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 51;
            return 185;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 26);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 91:
         return jjStopAtPos(0, 29);
      case 93:
         return jjStopAtPos(0, 30);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 123:
         return jjStopAtPos(0, 27);
      case 125:
         return jjStopAtPos(0, 28);
      case 65279:
         return jjStartNfaWithStates_0(0, 9, 184);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 94:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 184;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 184:
                  if ((0xaffffc7affffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  else if (curChar == 58)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjAddStates(0, 2); }
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 185:
                  if ((0xaffffc7affffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 0:
                  if ((0xfffffc7affffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 148;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 124;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddStates(6, 12); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 16); }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(167, 180); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  else if (curChar == 58)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjAddStates(0, 2); }
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 3)
                        kind = 3;
                     { jjCheckNAddStates(23, 25); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAddStates(26, 28); }
                  }
                  else if (curChar == 63)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddTwoStates(158, 160); }
                  }
                  if (curChar == 60)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar != 59)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAddStates(23, 25); }
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAddStates(23, 25); }
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 9:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 60)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 12:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 13:
                  if (curChar == 62 && kind > 4)
                     kind = 4;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar != 58)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(0, 2); }
                  break;
               case 32:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 33:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 34:
                  if ((0x7ff200000000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 36:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 37:
                  if (curChar == 37)
                     { jjAddStates(33, 34); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 42:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 44:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 45:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 48:
                  if (curChar != 58)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(35, 37); }
                  break;
               case 49:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 50:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 51:
                  if ((0x7ff200000000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 53:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 54:
                  if (curChar == 37)
                     { jjAddStates(42, 43); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 59:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 61:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 62:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 66:
                  if (curChar == 39)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 67:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 68:
                  if (curChar == 39 && kind > 21)
                     kind = 21;
                  break;
               case 70:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 85:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 86:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 88:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 39)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 103:
               case 106:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(104, 107); }
                  break;
               case 104:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 105:
                  if (curChar == 39)
                     { jjAddStates(48, 49); }
                  break;
               case 108:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 122:
                  if (curChar == 39 && kind > 23)
                     kind = 23;
                  break;
               case 123:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 125:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 34)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 127:
               case 130:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(128, 131); }
                  break;
               case 128:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 129:
                  if (curChar == 34)
                     { jjAddStates(54, 55); }
                  break;
               case 132:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(141); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 146:
                  if (curChar == 34 && kind > 24)
                     kind = 24;
                  break;
               case 147:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 149:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 152:
                  if (curChar == 45)
                     { jjCheckNAdd(153); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 154:
                  if ((0x5000000000000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 155:
                  if ((0xfffffc7affffc9ffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 156:
                  if ((0xaffffc7affffc9ffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 157:
                  if (curChar != 63)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddTwoStates(158, 160); }
                  break;
               case 158:
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(159); }
                  break;
               case 160:
                  if ((0xaffffc7affffc9ffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(160); }
                  break;
               case 161:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(162); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(163, 164); }
                  break;
               case 164:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(165); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(165); }
                  break;
               case 166:
                  if (curChar == 46)
                     { jjCheckNAdd(167); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(167); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(168, 169); }
                  break;
               case 169:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(170, 171); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(170, 171); }
                  break;
               case 172:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(173); }
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(173); }
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(6, 12); }
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(175, 176); }
                  break;
               case 177:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(178); }
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(178); }
                  break;
               case 179:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(167, 180); }
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(180, 181); }
                  break;
               case 182:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(183); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(183); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 184:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(31); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 185:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 92)
                     { jjAddStates(56, 57); }
                  break;
               case 0:
                  if ((0xd7ffffff97fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  else if (curChar == 64)
                     { jjCheckNAdd(151); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(26, 28); }
                  break;
               case 7:
                  if (kind > 3)
                     kind = 3;
                  { jjAddStates(23, 25); }
                  break;
               case 12:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 14:
                  if (curChar == 92)
                     { jjAddStates(56, 57); }
                  break;
               case 15:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 35:
                  if (curChar == 92)
                     { jjAddStates(61, 62); }
                  break;
               case 36:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 42:
                  if ((0x4000000080000001L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 43:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 52:
                  if (curChar == 92)
                     { jjAddStates(63, 64); }
                  break;
               case 53:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 59:
                  if ((0x4000000080000001L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 60:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 65:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 67:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 69:
                  if (curChar == 92)
                     { jjAddStates(65, 67); }
                  break;
               case 70:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 71:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 80:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 87:
                  if (curChar == 92)
                     { jjAddStates(68, 70); }
                  break;
               case 88:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 89:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 98:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 107:
                  if (curChar == 92)
                     { jjAddStates(71, 73); }
                  break;
               case 108:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 109:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
               case 121:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 118:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 128:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 131:
                  if (curChar == 92)
                     { jjAddStates(74, 76); }
                  break;
               case 132:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 133:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 138:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
               case 145:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(141); }
                  break;
               case 141:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(50, 53); }
                  break;
               case 142:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 150:
                  if (curChar == 64)
                     { jjCheckNAdd(151); }
                  break;
               case 151:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddTwoStates(151, 152); }
                  break;
               case 153:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 155:
                  if ((0xd7ffffff97fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 156:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 158:
               case 159:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(159); }
                  break;
               case 160:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 171:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(77, 78); }
                  break;
               case 176:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(81, 82); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 184:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(29, 30); }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(31); }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  break;
               case 185:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 5); }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(58, 60); }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAdd(156); }
                  }
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(26, 28); }
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjAddStates(23, 25); }
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 29:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(31); }
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 33:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 32); }
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 49:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 41); }
                  break;
               case 50:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 51:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 6)
                     kind = 6;
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 22); }
                  break;
               case 85:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 19); }
                  break;
               case 104:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(44, 47); }
                  break;
               case 128:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(50, 53); }
                  break;
               case 155:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 156:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(156); }
                  break;
               case 158:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(159); }
                  break;
               case 159:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(159); }
                  break;
               case 160:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 160;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 184 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\ufeff", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\74\74", "\76\76", "\136\136", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   32, 43, 45, 12, 13, 14, 162, 163, 164, 168, 169, 175, 176, 162, 163, 166, 
   168, 85, 86, 87, 67, 68, 69, 7, 8, 10, 2, 3, 5, 33, 34, 35, 
   37, 38, 40, 49, 60, 62, 50, 51, 52, 54, 55, 57, 103, 104, 105, 107, 
   106, 123, 127, 128, 129, 131, 130, 147, 15, 24, 29, 30, 31, 36, 42, 53, 
   59, 70, 71, 80, 88, 89, 98, 108, 109, 118, 132, 133, 142, 172, 173, 177, 
   178, 182, 183, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SSE_ParserCoreTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SSE_ParserCoreTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 184; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x80007ffe03bf3L, 
};
static final long[] jjtoSkip = {
   0xcL, 
};
static final long[] jjtoSpecial = {
   0xcL, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[184];
    private final int[] jjstateSet = new int[2 * 184];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
