/* SPARQLParser12TokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SPARQLParser12TokenManager.java */
package org.apache.jena.sparql.lang.sparql_12.javacc ;
import org.apache.jena.graph.* ;
import org.apache.jena.query.* ;
import org.apache.jena.sparql.core.Var ;
import org.apache.jena.sparql.syntax.* ;
import org.apache.jena.sparql.expr.* ;
import org.apache.jena.sparql.path.* ;
import org.apache.jena.sparql.expr.aggregate.* ;
import org.apache.jena.sparql.expr.aggregate.lib.* ;
import org.apache.jena.update.* ;
import org.apache.jena.sparql.modify.request.* ;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SPARQLParser12TokenManager implements SPARQLParser12Constants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 193;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10L);
      case 40:
         jjmatchedKind = 169;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 170;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L, 0x0L);
      case 42:
         jjmatchedKind = 199;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 197;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 178;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 198;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 179;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 200;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 194;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 177;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1500000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 180;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2200000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 205;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 202;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4220008408000000L, 0x10000000L, 0x20100L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100080080000L, 0x44L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400000004000000L, 0x8120000008L, 0x4c0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x802800000L, 0x8000400000002000L, 0x12002L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x4000000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x4000000040000002L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x40010000000000L, 0x1L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x800000c00000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x3e00b0L, 0x4001L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x200001c000L, 0x20L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1800080000000000L, 0x81200000000000L, 0xa00L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10001000000000L, 0x10000000000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x4020060000000L, 0x0L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x2000000100000L, 0x0L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x889000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xa101200000400000L, 0x1f420f0606001e00L, 0x1000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x200c000000000000L, 0x8000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40200000000L, 0x20001000000100L, 0x80000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x100200000L, 0x0L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x40000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 174;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 175;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 204;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x200L);
      case 97:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x4220008408000000L, 0x10000000L, 0x20100L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100080080000L, 0x44L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000004000000L, 0x8120000008L, 0x4c0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x802800000L, 0x8000400000002000L, 0x12002L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x4000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x4000000040000002L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40010000000000L, 0x1L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x800000c00000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x3e00b0L, 0x4001L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x200001c000L, 0x20L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1800080000000000L, 0x81200000000000L, 0xa00L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10001000000000L, 0x10000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4020060000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000100000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x889000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa101200000400000L, 0x1f420f0606001e00L, 0x1000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x200c000000000000L, 0x8000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40200000000L, 0x20001000000100L, 0x80000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100200000L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x40000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 172;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 124:
         jjmatchedKind = 203;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x8L);
      case 125:
         jjmatchedKind = 173;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 192;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L);
      case 61:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x9080001100080000L, active1, 0xc00040000ec1e000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x100L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x100200803600000L, active1, 0x2100821000000L, active2, 0x10802L, active3, 0L);
      case 70:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x1f00000000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x800180010800000L, active1, 0x5000000000002L, active2, 0x41000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x20040L, active3, 0L);
      case 78:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x48200000000L, active1, 0x4000000040L, active2, 0x4001L, active3, 0L);
      case 79:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x410000004000000L, active1, 0x10a0818000000cL, active2, 0x620L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x42412040100000L, active1, 0x2000000000000181L, active2, 0x2080L, active3, 0L);
      case 83:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800408000000L, active1, 0x3e0000L, active2, 0x80000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400f0400001e00L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001000000000000L, active1, 0x20000200000000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         break;
      case 90:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x9080001100080000L, active1, 0xc00040000ec1e000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x100L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100200803600000L, active1, 0x2100821000000L, active2, 0x10802L, active3, 0L);
      case 102:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x1f00000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800180010800000L, active1, 0x5000000000002L, active2, 0x41000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x20040L, active3, 0L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x48200000000L, active1, 0x4000000040L, active2, 0x4001L, active3, 0L);
      case 111:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x410000004000000L, active1, 0x10a0818000000cL, active2, 0x620L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x42412040100000L, active1, 0x2000000000000181L, active2, 0x2080L, active3, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800408000000L, active1, 0x3e0000L, active2, 0x80000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400f0400001e00L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001000000000000L, active1, 0x20000200000000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         break;
      case 122:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 1;
         }
         break;
      case 125:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 2;
         }
         break;
      case 53:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
         }
         break;
      case 62:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x1f00103000000008L, active2, 0x20L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x200080000L, active2, 0L);
      case 67:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2004000000000L, active2, 0L);
      case 68:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x241000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000100000L, active1, 0L, active2, 0xc0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0x10000L);
      case 71:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 73:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8440000000000L, active1, 0x20000020040000L, active2, 0x80000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 75:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000L, active1, 0x4000000000100002L, active2, 0x1002L);
      case 77:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001010000000L, active1, 0x4000006000000L, active2, 0L);
      case 78:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180004000000L, active1, 0x120810821c000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000000L, active1, 0x40000041L, active2, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x800000000L, active2, 0x400L);
      case 82:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000200000L, active1, 0x400f0400001c00L, active2, 0L);
      case 83:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x802880000L, active1, 0xc00000L, active2, 0x1L);
      case 84:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000000L, active1, 0x8000000000002000L, active2, 0x44800L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2000800080020004L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0x200L);
      case 87:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x1f00103000000008L, active2, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x200080000L, active2, 0L);
      case 99:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2004000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x241000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000100000L, active1, 0L, active2, 0xc0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0x10000L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 105:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8440000000000L, active1, 0x20000020040000L, active2, 0x80000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000L, active1, 0x4000000000100002L, active2, 0x1002L);
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001010000000L, active1, 0x4000006000000L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180004000000L, active1, 0x120810821c000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000000L, active1, 0x40000041L, active2, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x800000000L, active2, 0x400L);
      case 114:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000200000L, active1, 0x400f0400001c00L, active2, 0L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x802880000L, active1, 0xc00000L, active2, 0x1L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000000L, active1, 0x8000000000002000L, active2, 0x44800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2000800080020004L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0x200L);
      case 119:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600000000000000L, active2, 0L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 65:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x80000002000L, active2, 0x100c0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 67:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x100000000L, active2, 0L);
      case 68:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x1040L, active2, 0L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4001240400000L, active1, 0x4020007000000L, active2, 0x1003L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 71:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18000L, active2, 0L);
      case 72:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020010000000L, active1, 0x100000L, active2, 0L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 76:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00c80c08L, active2, 0L);
      case 77:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x80000004L, active2, 0x80000L);
      case 79:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x2004040000000L, active2, 0L);
      case 80:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000410000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000L, active1, 0x800000060000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000024200000L, active1, 0x4000013200000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x208000000002L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080101000000L, active1, 0x41000000200001L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x80000002000L, active2, 0x100c0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x100000000L, active2, 0L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x1040L, active2, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4001240400000L, active1, 0x4020007000000L, active2, 0x1003L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18000L, active2, 0L);
      case 104:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020010000000L, active1, 0x100000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00c80c08L, active2, 0L);
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x80000004L, active2, 0x80000L);
      case 111:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x2004040000000L, active2, 0L);
      case 112:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000410000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000L, active1, 0x800000060000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000024200000L, active1, 0x4000013200000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x208000000002L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080101000000L, active1, 0x41000000200001L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8900c80c00L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001400000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000010000L, active2, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000120000000L, active1, 0x4040000000aL, active2, 0L);
      case 70:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 71:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         break;
      case 72:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2a00000b00000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x208000L, active2, 0L);
      case 78:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x2020000000000L, active2, 0x1000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000002000000L, active1, 0L, active2, 0x1L);
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 84:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000004000000L, active1, 0x1010202102000L, active2, 0x82L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 88:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8900c80c00L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001400000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000010000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000120000000L, active1, 0x4040000000aL, active2, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 103:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         break;
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2a00000b00000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x208000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x2020000000000L, active2, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000002000000L, active1, 0L, active2, 0x1L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000004000000L, active1, 0x1010202102000L, active2, 0x82L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 120:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         break;
      case 52:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         break;
      case 54:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 5;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x10004008000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x3200000000000L, active1, 0x800000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2020000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x1004002300000L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 71:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x40008000010000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 78:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000800000L, active1, 0xc80c00L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x4000000000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 88:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x10004008000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x3200000000000L, active1, 0x800000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2020000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x1004002300000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x40008000010000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 110:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000800000L, active1, 0xc80c00L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x4000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 120:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2020000000000L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0x9L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 71:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800800L, active2, 0L);
      case 75:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x4000000L, active2, 0L);
      case 78:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4008000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 82:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10002300000L, active2, 0L);
      case 83:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x8000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2020000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0x9L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800800L, active2, 0L);
      case 107:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x4000000L, active2, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4008000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10002300000L, active2, 0L);
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x8000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x8000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800800L);
      case 69:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 76:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x1L);
      case 82:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L);
      case 83:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x10000000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800800L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 7;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x1L);
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L);
      case 115:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800800L);
      case 76:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
         }
         break;
      case 83:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 8;
         }
         break;
      case 99:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800800L);
      case 108:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
         }
         break;
      case 115:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active1, 0x1L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000L);
      case 82:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000L);
      case 114:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active1, 0x1L);
      case 83:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 10;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x1L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 84:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 11;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa12_0(active1, 0x4000000000L);
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 11;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 13;
         }
         break;
      case 105:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 233;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     { jjCheckNAddStates(0, 5); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(6, 10); }
                  else if (curChar == 43)
                     { jjCheckNAddStates(11, 15); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(198, 206); }
                  else if (curChar == 58)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAddStates(16, 18); }
                  }
                  else if (curChar == 40)
                     { jjCheckNAddStates(19, 21); }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 120;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 100;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 60)
                     { jjCheckNAddStates(22, 24); }
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(25, 27); }
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 34)
                     { jjCheckNAddStates(28, 30); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 17:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 18:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if ((0x3ff200000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 23:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(28); }
                  break;
               case 31:
                  if (curChar == 45)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 33:
                  if (curChar != 45)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 37:
                  if (curChar == 35)
                     { jjCheckNAddStates(37, 42); }
                  break;
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(37, 42); }
                  break;
               case 39:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 40:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 45:
                  if (curChar == 10)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 46:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 53:
                  if ((0x8400000000L & l) != 0L && kind > 161)
                     kind = 161;
                  break;
               case 54:
                  if (curChar == 39)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 55:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 56:
                  if (curChar == 39 && kind > 165)
                     kind = 165;
                  break;
               case 58:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 68:
                  if (curChar == 34)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 69:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 70:
                  if (curChar == 34 && kind > 166)
                     kind = 166;
                  break;
               case 72:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 82:
                  if (curChar == 39)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 83:
               case 86:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(84, 87); }
                  break;
               case 84:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 85:
                  if (curChar == 39)
                     { jjAddStates(50, 51); }
                  break;
               case 88:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 98:
                  if (curChar == 39 && kind > 167)
                     kind = 167;
                  break;
               case 99:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 101:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 34)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 103:
               case 106:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(104, 107); }
                  break;
               case 104:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 105:
                  if (curChar == 34)
                     { jjAddStates(56, 57); }
                  break;
               case 108:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 118:
                  if (curChar == 34 && kind > 168)
                     kind = 168;
                  break;
               case 119:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 121:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 40)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 123:
                  if (curChar == 35)
                     { jjCheckNAddStates(58, 63); }
                  break;
               case 124:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(58, 63); }
                  break;
               case 125:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 126:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 127:
                  if (curChar == 41 && kind > 171)
                     kind = 171;
                  break;
               case 128:
                  if (curChar == 10)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 129:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 131:
                  if (curChar == 35)
                     { jjCheckNAddStates(64, 69); }
                  break;
               case 132:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(64, 69); }
                  break;
               case 133:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 134:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 136:
                  if (curChar == 10)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 137:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(73, 74); }
                  break;
               case 140:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 141:
                  if (curChar == 58 && kind > 10)
                     kind = 10;
                  break;
               case 142:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(75, 76); }
                  break;
               case 143:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if (curChar == 58)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 145:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 146:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 147:
                  if ((0x7ff200000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 149:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 150:
                  if (curChar == 37)
                     { jjAddStates(81, 82); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 155:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 157:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 158:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 161:
                  if (curChar != 58)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(16, 18); }
                  break;
               case 164:
                  if (curChar == 35)
                     { jjCheckNAddStates(83, 88); }
                  break;
               case 165:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(83, 88); }
                  break;
               case 166:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 167:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 172:
                  if (curChar == 10)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 173:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 179:
                  if (curChar == 35)
                     { jjCheckNAddStates(92, 97); }
                  break;
               case 180:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(92, 97); }
                  break;
               case 181:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 182:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 188:
                  if (curChar == 10)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 189:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAddStates(0, 5); }
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  { jjCheckNAdd(195); }
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(196, 197); }
                  break;
               case 197:
                  if (curChar == 46)
                     { jjCheckNAdd(198); }
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  { jjCheckNAdd(198); }
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(101, 103); }
                  break;
               case 200:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 203:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(204); }
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(204); }
                  break;
               case 205:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(198, 206); }
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(206, 202); }
                  break;
               case 207:
                  if (curChar == 43)
                     { jjCheckNAddStates(11, 15); }
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  { jjCheckNAdd(208); }
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(209, 210); }
                  break;
               case 210:
                  if (curChar == 46)
                     { jjCheckNAdd(211); }
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  { jjCheckNAdd(211); }
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(104, 106); }
                  break;
               case 213:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(214, 215); }
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(214, 215); }
                  break;
               case 216:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(217); }
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAdd(217); }
                  break;
               case 218:
                  if (curChar == 46)
                     { jjCheckNAdd(219); }
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(219, 215); }
                  break;
               case 220:
                  if (curChar == 45)
                     { jjCheckNAddStates(6, 10); }
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  { jjCheckNAdd(221); }
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(222, 223); }
                  break;
               case 223:
                  if (curChar == 46)
                     { jjCheckNAdd(224); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  { jjCheckNAdd(224); }
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(107, 109); }
                  break;
               case 226:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(227, 228); }
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(227, 228); }
                  break;
               case 229:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(230); }
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 158)
                     kind = 158;
                  { jjCheckNAdd(230); }
                  break;
               case 231:
                  if (curChar == 46)
                     { jjCheckNAdd(232); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(232, 228); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(110, 115); }
                  else if (curChar == 91)
                     { jjCheckNAddStates(70, 72); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 64)
                     { jjCheckNAdd(30); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(116, 117); }
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(25, 27); }
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 22:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(25); }
                  break;
               case 27:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if (curChar == 64)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(118, 120); }
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 38:
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 41:
                  if ((0x200000002L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x14404410000000L & l) != 0L && kind > 161)
                     kind = 161;
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 57:
                  if (curChar == 92)
                     { jjAddStates(121, 122); }
                  break;
               case 58:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 59:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 69:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 71:
                  if (curChar == 92)
                     { jjAddStates(123, 124); }
                  break;
               case 72:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 73:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 84:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 87:
                  if (curChar == 92)
                     { jjAddStates(125, 126); }
                  break;
               case 88:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 89:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 104:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 107:
                  if (curChar == 92)
                     { jjAddStates(127, 128); }
                  break;
               case 108:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 109:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 124:
                  { jjAddStates(58, 63); }
                  break;
               case 130:
                  if (curChar == 91)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 132:
                  { jjCheckNAddStates(64, 69); }
                  break;
               case 135:
                  if (curChar == 93 && kind > 176)
                     kind = 176;
                  break;
               case 138:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(110, 115); }
                  break;
               case 139:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(141); }
                  break;
               case 142:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(142, 143); }
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 148:
                  if (curChar == 92)
                     { jjAddStates(129, 130); }
                  break;
               case 149:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 155:
                  if ((0x4000000080000001L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 156:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 159:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 162:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(116, 117); }
                  break;
               case 163:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(89, 91); }
                  break;
               case 165:
                  { jjCheckNAddStates(83, 88); }
                  break;
               case 168:
                  if ((0x200000002L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 169:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 174:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(98, 100); }
                  break;
               case 180:
                  { jjCheckNAddStates(92, 97); }
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L && kind > 132)
                     kind = 132;
                  break;
               case 184:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 190:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 191:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 202:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(131, 132); }
                  break;
               case 215:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(133, 134); }
                  break;
               case 228:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(135, 136); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(110, 115); }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(25, 27); }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(22, 24); }
                  break;
               case 19:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(25); }
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(25); }
                  break;
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(28); }
                  break;
               case 28:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(28); }
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 42); }
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(31, 33); }
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(28, 30); }
                  break;
               case 84:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(46, 49); }
                  break;
               case 104:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(52, 55); }
                  break;
               case 124:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(58, 63); }
                  break;
               case 132:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(64, 69); }
                  break;
               case 139:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 140:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(141); }
                  break;
               case 142:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(142, 143); }
                  break;
               case 143:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(144); }
                  break;
               case 145:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(77, 80); }
                  break;
               case 146:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(77, 80); }
                  break;
               case 147:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 165:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(83, 88); }
                  break;
               case 180:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(92, 97); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 233 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\141", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", null, "\173", "\175", "\133", "\135", null, "\73", "\54", 
"\56", "\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\74\74\50", "\51\76\76", 
"\74\74", "\76\76", "\173\174", "\174\175", "\176", "\41", "\72", "\174\174", "\46\46", 
"\53", "\55", "\52", "\57", "\136\136", "\100", "\174", "\136", "\77", null, null, 
null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   195, 196, 197, 199, 200, 202, 221, 222, 223, 225, 231, 208, 209, 210, 212, 218, 
   145, 156, 158, 123, 126, 127, 6, 7, 17, 1, 2, 4, 69, 70, 71, 55, 
   56, 57, 31, 32, 35, 37, 38, 39, 46, 40, 44, 37, 40, 44, 83, 84, 
   85, 87, 86, 99, 103, 104, 105, 107, 106, 119, 123, 124, 125, 129, 126, 127, 
   131, 132, 133, 137, 134, 135, 131, 134, 135, 139, 140, 142, 143, 146, 147, 148, 
   150, 151, 153, 164, 165, 166, 173, 167, 171, 164, 167, 171, 179, 180, 181, 189, 
   182, 187, 179, 182, 187, 199, 200, 202, 212, 213, 215, 225, 226, 228, 139, 140, 
   141, 142, 143, 144, 177, 193, 30, 31, 35, 58, 59, 72, 73, 88, 89, 108, 
   109, 149, 155, 203, 204, 216, 217, 229, 230, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SPARQLParser12TokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SPARQLParser12TokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 233; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffcfe01L, 0xffffffffffffffffL, 0xffffffe27eefffffL, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[233];
    private final int[] jjstateSet = new int[2 * 233];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
