/* Generated By:JavaCC: Do not edit this line. ARQParserTokenManager.java */
package org.apache.jena.sparql.lang.arq ;












/** Token Manager. */
public class ARQParserTokenManager implements ARQParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 186;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 40:
         jjmatchedKind = 169;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 170;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 193;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 191;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 178;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 192;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100L);
      case 46:
         jjmatchedKind = 179;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 194;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20L);
      case 59:
         jjmatchedKind = 177;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000000L, 0x200L);
      case 61:
         jjmatchedKind = 180;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 202;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 196;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x844010810000000L, 0x40000000L, 0x100800L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200100100000L, 0x220L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x80000008000000L, 0x20480003040L, 0x2600L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1004800000L, 0x1000000080000L, 0x90014L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x10000000000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x100000010L, 0x2L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x8020000000000L, 0x8L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x2000000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c00580L, 0x20008L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x800020000000L, 0x8000300000L, 0x100L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x300100000000000L, 0x404800000004000L, 0x5000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x2002000000000L, 0x40000000000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x400c0000000L, 0x0L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x2228000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x7420400000400000L, 0xf9083c1810078004L, 0x8000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000000000L, 0x40001L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x80400000000L, 0x80004000000800L, 0x400000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8000000200000000L, 0x200000000000003L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x200000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 174;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 175;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 199;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8L);
      case 97:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x844010810000000L, 0x40000000L, 0x100800L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200100100000L, 0x220L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000008000000L, 0x20480003040L, 0x2600L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1004800000L, 0x1000000080000L, 0x90014L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x10000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x100000010L, 0x2L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8020000000000L, 0x8L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x2000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c00580L, 0x20008L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800020000000L, 0x8000300000L, 0x100L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x300100000000000L, 0x404800000004000L, 0x5000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2002000000000L, 0x40000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400c0000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x2228000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7420400000400000L, 0xf9083c1810078004L, 0x8000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000000000L, 0x40001L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80400000000L, 0x80004000000800L, 0x400000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000200000000L, 0x200000000000003L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x200000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 172;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 198;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 125:
         jjmatchedKind = 173;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 187;
         return jjMoveNfa_0(0, 0);
      case 65279:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x8210002200100000L, active1, 0x1000030383007L, active2, 0x6L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0x800L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c01005400000L, active1, 0x208402088000000L, active2, 0x84010L, active3, 0L);
      case 70:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0xf800000000008000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x100300020800000L, active1, 0x14000000000010L, active2, 0x208000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0x100200L, active3, 0L);
      case 78:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x90400000000L, active1, 0x10000000200L, active2, 0x20008L, active3, 0L);
      case 79:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x82000008000000L, active1, 0x42820600000060L, active2, 0x3100L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8024080200000L, active1, 0xc08L, active2, 0x10401L, active3, 0L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x812000000L, active1, 0x7c00000L, active2, 0x400000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x1003c1000070000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x80000800004000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         break;
      case 90:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8210002200100000L, active1, 0x1000030383007L, active2, 0x6L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0x800L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c01005400000L, active1, 0x208402088000000L, active2, 0x84010L, active3, 0L);
      case 102:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0xf800000000008000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100300020800000L, active1, 0x14000000000010L, active2, 0x208000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0x100200L, active3, 0L);
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x90400000000L, active1, 0x10000000200L, active2, 0x20008L, active3, 0L);
      case 111:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x82000008000000L, active1, 0x42820600000060L, active2, 0x3100L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8024080200000L, active1, 0xc08L, active2, 0x10401L, active3, 0L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x812000000L, active1, 0x7c00000L, active2, 0x400000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x1003c1000070000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x80000800004000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         break;
      case 122:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         break;
      case 124:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 53:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0xf80040c000000040L, active2, 0x100L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x801000000L, active2, 0L);
      case 67:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8010000000000L, active2, 0L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000481000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000200000L, active1, 0L, active2, 0x600L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0x80000L);
      case 71:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 73:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000000000L, active1, 0x80000080800000L, active2, 0x400000L);
      case 75:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200400000L, active1, 0x2006010L, active2, 0x8012L);
      case 77:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000L, active1, 0x10000010000004L, active2, 0L);
      case 78:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x300008000000L, active1, 0x4820424300000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004002000000L, active1, 0x100008208L, active2, 0x10000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x2000000000L, active2, 0x2000L);
      case 82:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x3003c1000060003L, active2, 0L);
      case 83:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1004900000L, active1, 0x1000L, active2, 0x8L);
      case 84:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x80000L, active2, 0x224004L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x2000200400020L, active2, 0x1L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0x1000L);
      case 87:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0xf80040c000000040L, active2, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x801000000L, active2, 0L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8010000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000481000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000200000L, active1, 0L, active2, 0x600L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0x80000L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 105:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000000000L, active1, 0x80000080800000L, active2, 0x400000L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200400000L, active1, 0x2006010L, active2, 0x8012L);
      case 109:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000L, active1, 0x10000010000004L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x300008000000L, active1, 0x4820424300000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004002000000L, active1, 0x100008208L, active2, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x2000000000L, active2, 0x2000L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x3003c1000060003L, active2, 0L);
      case 115:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1004900000L, active1, 0x1000L, active2, 0x8L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x80000L, active2, 0x224004L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x2000200400020L, active2, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0x1000L);
      case 119:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000000000000000L, active2, 0L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 65:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x200000080000L, active2, 0x80600L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 67:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x400000000L, active2, 0L);
      case 68:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40200L, active2, 0L);
      case 69:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7000002480400000L, active1, 0x10080018000000L, active2, 0x8018L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 71:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 72:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010040020000000L, active1, 0x2000000L, active2, 0L);
      case 76:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3001020040L, active2, 0L);
      case 77:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x200000020L, active2, 0x400000L);
      case 79:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x8010100000000L, active2, 0L);
      case 80:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x4L, active2, 0L);
      case 82:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x2000000c08000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000048000000L, active1, 0x20004c800000000L, active2, 0x2L);
      case 84:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x820000004010L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100201000000L, active1, 0x104000004000008L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3L, active2, 0L);
      case 97:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x200000080000L, active2, 0x80600L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x400000000L, active2, 0L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40200L, active2, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7000002480400000L, active1, 0x10080018000000L, active2, 0x8018L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 104:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010040020000000L, active1, 0x2000000L, active2, 0L);
      case 108:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3001020040L, active2, 0L);
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x200000020L, active2, 0x400000L);
      case 111:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x8010100000000L, active2, 0L);
      case 112:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x2000000c08000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000048000000L, active1, 0x20004c800000000L, active2, 0x2L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x820000004010L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100201000000L, active1, 0x104000004000008L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 53:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x22401020000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000L, active1, 0x101000000050L, active2, 0L);
      case 70:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 71:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 4;
         }
         break;
      case 72:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000a00000L, active1, 0x200000000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4200000L, active2, 0L);
      case 78:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x8080000000000L, active2, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xaL, active2, 0L);
      case 82:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000004000000L, active1, 0L, active2, 0x8L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008000000L, active1, 0x4040812088000L, active2, 0x410L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0x80000L);
      case 86:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000000L, active1, 0L, active2, 0L);
      case 88:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x22401020000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000L, active1, 0x101000000050L, active2, 0L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 103:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 4;
         }
         break;
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000a00000L, active1, 0x200000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4200000L, active2, 0L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x8080000000000L, active2, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xaL, active2, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000004000000L, active1, 0L, active2, 0x8L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008000000L, active1, 0x4040812088000L, active2, 0x410L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0x80000L);
      case 118:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         break;
      case 52:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         break;
      case 54:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 5;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x40000200001L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x2000000000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8080000000000L, active2, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x4010016008000L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 71:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x100020000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 78:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000040000800000L, active1, 0x1020000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x210000000000002L, active2, 0L);
      case 82:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 88:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000000L, active1, 0x8L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x40000200001L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x2000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8080000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x4010016008000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x100020000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000040000800000L, active1, 0x1020000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x210000000000002L, active2, 0L);
      case 114:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 120:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000800000L, active1, 0x48L, active2, 0L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 71:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 75:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 78:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10020000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 80:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x80000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40016000000L, active2, 0L);
      case 83:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x8000L, active2, 0L);
      case 84:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x200000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000800000L, active1, 0x48L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 107:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 110:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10020000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 112:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x80000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40016000000L, active2, 0L);
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x8000L, active2, 0L);
      case 116:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x200000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x200000L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 76:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x4020000000000000L, active1, 0x8L);
      case 80:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         break;
      case 82:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L);
      case 83:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x200000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4020000000000000L, active1, 0x8L);
      case 112:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
         }
         break;
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L);
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 76:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 80:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
         }
         break;
      case 82:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 83:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 8;
         }
         break;
      case 99:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
         }
         break;
      case 115:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 80:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 112:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active1, 0x8L);
      case 83:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x8L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 84:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L);
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 13;
         }
         break;
      case 105:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 207;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 152)
                        kind = 152;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  else if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(149, 161);
                  else if (curChar == 58)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(17, 19);
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(20, 22);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(23, 25);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  else if (curChar == 39)
                     jjCheckNAddStates(29, 31);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(23, 25);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 62 && kind > 10)
                     kind = 10;
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff200000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
                  if (curChar == 35)
                     jjCheckNAddStates(32, 37);
                  break;
               case 25:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(32, 37);
                  break;
               case 26:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 27:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 32:
                  if (curChar == 10)
                     jjCheckNAddStates(38, 40);
                  break;
               case 33:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 41:
                  if (curChar == 39)
                     jjCheckNAddStates(29, 31);
                  break;
               case 42:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 45:
                  if (curChar == 39 && kind > 165)
                     kind = 165;
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 47:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 49:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 50:
                  if (curChar == 34 && kind > 166)
                     kind = 166;
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddStates(41, 44);
                  break;
               case 52:
               case 57:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 55:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 56:
                  if (curChar == 39)
                     jjAddStates(45, 46);
                  break;
               case 58:
                  if (curChar == 39 && kind > 167)
                     kind = 167;
                  break;
               case 59:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 61:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 34)
                     jjCheckNAddStates(47, 50);
                  break;
               case 63:
               case 68:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 66:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 67:
                  if (curChar == 34)
                     jjAddStates(51, 52);
                  break;
               case 69:
                  if (curChar == 34 && kind > 168)
                     kind = 168;
                  break;
               case 70:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 72:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 40)
                     jjCheckNAddStates(20, 22);
                  break;
               case 74:
                  if (curChar == 35)
                     jjCheckNAddStates(53, 58);
                  break;
               case 75:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 58);
                  break;
               case 76:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 77:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 78:
                  if (curChar == 41 && kind > 171)
                     kind = 171;
                  break;
               case 79:
                  if (curChar == 10)
                     jjCheckNAddStates(20, 22);
                  break;
               case 80:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if (curChar == 35)
                     jjCheckNAddStates(59, 64);
                  break;
               case 83:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(59, 64);
                  break;
               case 84:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 85:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 87:
                  if (curChar == 10)
                     jjCheckNAddStates(65, 67);
                  break;
               case 88:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 90:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 91:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if (curChar == 58 && kind > 11)
                     kind = 11;
                  break;
               case 93:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 94:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if (curChar == 58)
                     jjCheckNAddStates(17, 19);
                  break;
               case 96:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 97:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 98:
                  if ((0x7ff200000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 100:
                  if ((0xa800fffa00000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 101:
                  if (curChar == 37)
                     jjAddStates(76, 77);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 106:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 108:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 109:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 112:
                  if (curChar != 58)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(17, 19);
                  break;
               case 115:
                  if (curChar == 35)
                     jjCheckNAddStates(78, 83);
                  break;
               case 116:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(78, 83);
                  break;
               case 117:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 118:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 123:
                  if (curChar == 10)
                     jjCheckNAddStates(84, 86);
                  break;
               case 124:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 130:
                  if (curChar == 35)
                     jjCheckNAddStates(87, 92);
                  break;
               case 131:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(87, 92);
                  break;
               case 132:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 133:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 139:
                  if (curChar == 10)
                     jjCheckNAddStates(93, 95);
                  break;
               case 140:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddStates(0, 6);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(146);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 148:
                  if (curChar == 46)
                     jjCheckNAdd(149);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAdd(149);
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(150, 151);
                  break;
               case 151:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 154:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(155);
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(155);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(156, 157);
                  break;
               case 158:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(159);
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(159);
                  break;
               case 160:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(149, 161);
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 163:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(164);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 154)
                     kind = 154;
                  jjCheckNAdd(164);
                  break;
               case 165:
                  if (curChar == 43)
                     jjCheckNAddStates(12, 16);
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(166);
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 168:
                  if (curChar == 46)
                     jjCheckNAdd(169);
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(169);
                  break;
               case 170:
                  if (curChar == 46)
                     jjCheckNAdd(171);
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(171, 172);
                  break;
               case 173:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(174);
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(174);
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(96, 99);
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(176, 177);
                  break;
               case 177:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(178, 179);
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(178, 179);
                  break;
               case 180:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(181);
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(181);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(182, 183);
                  break;
               case 184:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(185);
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(185);
                  break;
               case 186:
                  if (curChar == 45)
                     jjCheckNAddStates(7, 11);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 158)
                     kind = 158;
                  jjCheckNAdd(187);
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(188, 189);
                  break;
               case 189:
                  if (curChar == 46)
                     jjCheckNAdd(190);
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(190);
                  break;
               case 191:
                  if (curChar == 46)
                     jjCheckNAdd(192);
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(192, 193);
                  break;
               case 194:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(195);
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(195);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(100, 103);
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(197, 198);
                  break;
               case 198:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 201:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(202);
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(202);
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  break;
               case 205:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(206);
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(206);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(104, 109);
                  else if (curChar == 91)
                     jjCheckNAddStates(65, 67);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 64)
                     jjCheckNAdd(20);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(110, 111);
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(23, 25);
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(112, 113);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(15);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 64)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 25:
                  jjCheckNAddStates(32, 37);
                  break;
               case 28:
                  if ((0x200000002L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 29:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 43:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 47:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 53:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 54:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 64:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 65:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 75:
                  jjAddStates(53, 58);
                  break;
               case 81:
                  if (curChar == 91)
                     jjCheckNAddStates(65, 67);
                  break;
               case 83:
                  jjCheckNAddStates(59, 64);
                  break;
               case 86:
                  if (curChar == 93 && kind > 176)
                     kind = 176;
                  break;
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(104, 109);
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 99:
                  if (curChar == 92)
                     jjAddStates(114, 115);
                  break;
               case 100:
                  if ((0x4000000080000001L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 102:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 106:
                  if ((0x4000000080000001L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 107:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 113:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(110, 111);
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 116:
                  jjCheckNAddStates(78, 83);
                  break;
               case 119:
                  if ((0x200000002L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 120:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 125:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 126:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 131:
                  jjCheckNAddStates(87, 92);
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 135:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 141:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 153:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(116, 117);
                  break;
               case 157:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(118, 119);
                  break;
               case 162:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(120, 121);
                  break;
               case 172:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(122, 123);
                  break;
               case 179:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(126, 127);
                  break;
               case 193:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(128, 129);
                  break;
               case 200:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(130, 131);
                  break;
               case 204:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(132, 133);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(104, 109);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(23, 25);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(112, 113);
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(18);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(18);
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 37);
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(29, 31);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(26, 28);
                  break;
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 44);
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 50);
                  break;
               case 75:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(53, 58);
                  break;
               case 83:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(59, 64);
                  break;
               case 90:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(92);
                  break;
               case 93:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 94:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(95);
                  break;
               case 96:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(72, 75);
                  break;
               case 97:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(72, 75);
                  break;
               case 98:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 116:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(78, 83);
                  break;
               case 131:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(87, 92);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 207 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   146, 147, 148, 150, 151, 156, 157, 187, 188, 189, 191, 196, 166, 167, 168, 170, 
   175, 96, 107, 109, 74, 77, 78, 1, 2, 4, 47, 48, 50, 42, 43, 45, 
   24, 25, 26, 33, 27, 31, 24, 27, 31, 52, 53, 54, 56, 57, 59, 63, 
   64, 65, 67, 68, 70, 74, 75, 76, 80, 77, 78, 82, 83, 84, 88, 85, 
   86, 82, 85, 86, 90, 91, 93, 94, 97, 98, 99, 101, 102, 104, 115, 116, 
   117, 124, 118, 122, 115, 118, 122, 130, 131, 132, 140, 133, 138, 130, 133, 138, 
   176, 177, 182, 183, 197, 198, 203, 204, 90, 91, 92, 93, 94, 95, 128, 144, 
   6, 7, 100, 106, 154, 155, 158, 159, 163, 164, 173, 174, 180, 181, 184, 185, 
   194, 195, 201, 202, 205, 206, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\ufeff", null, null, null, 
null, null, null, null, null, null, "\141", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", null, "\173", "\175", "\133", "\135", null, "\73", "\54", 
"\56", "\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41", "\176", "\72", 
"\174\174", "\46\46", "\53", "\55", "\52", "\57", "\136\136", "\100", "\72\75", "\174", 
"\136", "\55\76", "\74\55", "\77", null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffff9fe01L, 0xffffffffffffffffL, 0xfffffff1ff7fffffL, 0x7ffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[207];
private final int[] jjstateSet = new int[414];
protected char curChar;
/** Constructor. */
public ARQParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ARQParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 207; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
