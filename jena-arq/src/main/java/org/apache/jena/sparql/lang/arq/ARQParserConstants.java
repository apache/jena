/* Generated By:JavaCC: Do not edit this line. ARQParserConstants.java */
package org.apache.jena.sparql.lang.arq ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ARQParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int WS = 7;
  /** RegularExpression Id. */
  int WSC = 8;
  /** RegularExpression Id. */
  int BOM = 9;
  /** RegularExpression Id. */
  int IRIref = 10;
  /** RegularExpression Id. */
  int PNAME_NS = 11;
  /** RegularExpression Id. */
  int PNAME_LN = 12;
  /** RegularExpression Id. */
  int BLANK_NODE_LABEL = 13;
  /** RegularExpression Id. */
  int VAR1 = 14;
  /** RegularExpression Id. */
  int VAR2 = 15;
  /** RegularExpression Id. */
  int LANGTAG = 16;
  /** RegularExpression Id. */
  int A2Z = 17;
  /** RegularExpression Id. */
  int A2ZN = 18;
  /** RegularExpression Id. */
  int KW_A = 19;
  /** RegularExpression Id. */
  int BASE = 20;
  /** RegularExpression Id. */
  int PREFIX = 21;
  /** RegularExpression Id. */
  int SELECT = 22;
  /** RegularExpression Id. */
  int DISTINCT = 23;
  /** RegularExpression Id. */
  int REDUCED = 24;
  /** RegularExpression Id. */
  int JSON = 25;
  /** RegularExpression Id. */
  int DESCRIBE = 26;
  /** RegularExpression Id. */
  int CONSTRUCT = 27;
  /** RegularExpression Id. */
  int ASK = 28;
  /** RegularExpression Id. */
  int LIMIT = 29;
  /** RegularExpression Id. */
  int OFFSET = 30;
  /** RegularExpression Id. */
  int ORDER = 31;
  /** RegularExpression Id. */
  int BY = 32;
  /** RegularExpression Id. */
  int VALUES = 33;
  /** RegularExpression Id. */
  int UNDEF = 34;
  /** RegularExpression Id. */
  int ASC = 35;
  /** RegularExpression Id. */
  int DESC = 36;
  /** RegularExpression Id. */
  int NAMED = 37;
  /** RegularExpression Id. */
  int FROM = 38;
  /** RegularExpression Id. */
  int WHERE = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int GRAPH = 41;
  /** RegularExpression Id. */
  int OPTIONAL = 42;
  /** RegularExpression Id. */
  int UNION = 43;
  /** RegularExpression Id. */
  int MINUS_P = 44;
  /** RegularExpression Id. */
  int BIND = 45;
  /** RegularExpression Id. */
  int SERVICE = 46;
  /** RegularExpression Id. */
  int LET = 47;
  /** RegularExpression Id. */
  int TRIPLE = 48;
  /** RegularExpression Id. */
  int IS_TRIPLE = 49;
  /** RegularExpression Id. */
  int SUBJECT = 50;
  /** RegularExpression Id. */
  int PREDICATE = 51;
  /** RegularExpression Id. */
  int OBJECT = 52;
  /** RegularExpression Id. */
  int EXISTS = 53;
  /** RegularExpression Id. */
  int NOT = 54;
  /** RegularExpression Id. */
  int AS = 55;
  /** RegularExpression Id. */
  int GROUP = 56;
  /** RegularExpression Id. */
  int HAVING = 57;
  /** RegularExpression Id. */
  int SEPARATOR = 58;
  /** RegularExpression Id. */
  int AGG = 59;
  /** RegularExpression Id. */
  int COUNT = 60;
  /** RegularExpression Id. */
  int MIN = 61;
  /** RegularExpression Id. */
  int MAX = 62;
  /** RegularExpression Id. */
  int SUM = 63;
  /** RegularExpression Id. */
  int AVG = 64;
  /** RegularExpression Id. */
  int MEDIAN = 65;
  /** RegularExpression Id. */
  int MODE = 66;
  /** RegularExpression Id. */
  int STDEV = 67;
  /** RegularExpression Id. */
  int STDEV_SAMP = 68;
  /** RegularExpression Id. */
  int STDEV_POP = 69;
  /** RegularExpression Id. */
  int VARIANCE = 70;
  /** RegularExpression Id. */
  int VAR_SAMP = 71;
  /** RegularExpression Id. */
  int VAR_POP = 72;
  /** RegularExpression Id. */
  int SAMPLE = 73;
  /** RegularExpression Id. */
  int GROUP_CONCAT = 74;
  /** RegularExpression Id. */
  int FILTER = 75;
  /** RegularExpression Id. */
  int BOUND = 76;
  /** RegularExpression Id. */
  int COALESCE = 77;
  /** RegularExpression Id. */
  int IN = 78;
  /** RegularExpression Id. */
  int IF = 79;
  /** RegularExpression Id. */
  int BNODE = 80;
  /** RegularExpression Id. */
  int IRI = 81;
  /** RegularExpression Id. */
  int URI = 82;
  /** RegularExpression Id. */
  int CAST = 83;
  /** RegularExpression Id. */
  int CALL = 84;
  /** RegularExpression Id. */
  int MULTI = 85;
  /** RegularExpression Id. */
  int SHORTEST = 86;
  /** RegularExpression Id. */
  int STR = 87;
  /** RegularExpression Id. */
  int STRLANG = 88;
  /** RegularExpression Id. */
  int STRDT = 89;
  /** RegularExpression Id. */
  int DTYPE = 90;
  /** RegularExpression Id. */
  int LANG = 91;
  /** RegularExpression Id. */
  int LANGMATCHES = 92;
  /** RegularExpression Id. */
  int IS_URI = 93;
  /** RegularExpression Id. */
  int IS_IRI = 94;
  /** RegularExpression Id. */
  int IS_BLANK = 95;
  /** RegularExpression Id. */
  int IS_LITERAL = 96;
  /** RegularExpression Id. */
  int IS_NUMERIC = 97;
  /** RegularExpression Id. */
  int REGEX = 98;
  /** RegularExpression Id. */
  int SAME_TERM = 99;
  /** RegularExpression Id. */
  int RAND = 100;
  /** RegularExpression Id. */
  int ABS = 101;
  /** RegularExpression Id. */
  int CEIL = 102;
  /** RegularExpression Id. */
  int FLOOR = 103;
  /** RegularExpression Id. */
  int ROUND = 104;
  /** RegularExpression Id. */
  int MOD = 105;
  /** RegularExpression Id. */
  int IDIV = 106;
  /** RegularExpression Id. */
  int CONCAT = 107;
  /** RegularExpression Id. */
  int SUBSTR = 108;
  /** RegularExpression Id. */
  int STRLEN = 109;
  /** RegularExpression Id. */
  int REPLACE = 110;
  /** RegularExpression Id. */
  int UCASE = 111;
  /** RegularExpression Id. */
  int LCASE = 112;
  /** RegularExpression Id. */
  int ENCODE_FOR_URI = 113;
  /** RegularExpression Id. */
  int CONTAINS = 114;
  /** RegularExpression Id. */
  int STRSTARTS = 115;
  /** RegularExpression Id. */
  int STRENDS = 116;
  /** RegularExpression Id. */
  int STRBEFORE = 117;
  /** RegularExpression Id. */
  int STRAFTER = 118;
  /** RegularExpression Id. */
  int YEAR = 119;
  /** RegularExpression Id. */
  int MONTH = 120;
  /** RegularExpression Id. */
  int DAY = 121;
  /** RegularExpression Id. */
  int HOURS = 122;
  /** RegularExpression Id. */
  int MINUTES = 123;
  /** RegularExpression Id. */
  int SECONDS = 124;
  /** RegularExpression Id. */
  int TIMEZONE = 125;
  /** RegularExpression Id. */
  int TZ = 126;
  /** RegularExpression Id. */
  int NOW = 127;
  /** RegularExpression Id. */
  int UUID = 128;
  /** RegularExpression Id. */
  int STRUUID = 129;
  /** RegularExpression Id. */
  int VERSION = 130;
  /** RegularExpression Id. */
  int MD5 = 131;
  /** RegularExpression Id. */
  int SHA1 = 132;
  /** RegularExpression Id. */
  int SHA224 = 133;
  /** RegularExpression Id. */
  int SHA256 = 134;
  /** RegularExpression Id. */
  int SHA384 = 135;
  /** RegularExpression Id. */
  int SHA512 = 136;
  /** RegularExpression Id. */
  int TRUE = 137;
  /** RegularExpression Id. */
  int FALSE = 138;
  /** RegularExpression Id. */
  int DATA = 139;
  /** RegularExpression Id. */
  int INSERT = 140;
  /** RegularExpression Id. */
  int DELETE = 141;
  /** RegularExpression Id. */
  int INSERT_DATA = 142;
  /** RegularExpression Id. */
  int DELETE_DATA = 143;
  /** RegularExpression Id. */
  int DELETE_WHERE = 144;
  /** RegularExpression Id. */
  int LOAD = 145;
  /** RegularExpression Id. */
  int CLEAR = 146;
  /** RegularExpression Id. */
  int CREATE = 147;
  /** RegularExpression Id. */
  int ADD = 148;
  /** RegularExpression Id. */
  int MOVE = 149;
  /** RegularExpression Id. */
  int COPY = 150;
  /** RegularExpression Id. */
  int META = 151;
  /** RegularExpression Id. */
  int SILENT = 152;
  /** RegularExpression Id. */
  int DROP = 153;
  /** RegularExpression Id. */
  int INTO = 154;
  /** RegularExpression Id. */
  int TO = 155;
  /** RegularExpression Id. */
  int DFT = 156;
  /** RegularExpression Id. */
  int ALL = 157;
  /** RegularExpression Id. */
  int WITH = 158;
  /** RegularExpression Id. */
  int USING = 159;
  /** RegularExpression Id. */
  int DIGITS = 160;
  /** RegularExpression Id. */
  int INTEGER = 161;
  /** RegularExpression Id. */
  int DECIMAL = 162;
  /** RegularExpression Id. */
  int DOUBLE = 163;
  /** RegularExpression Id. */
  int INTEGER_POSITIVE = 164;
  /** RegularExpression Id. */
  int DECIMAL_POSITIVE = 165;
  /** RegularExpression Id. */
  int DOUBLE_POSITIVE = 166;
  /** RegularExpression Id. */
  int INTEGER_NEGATIVE = 167;
  /** RegularExpression Id. */
  int DECIMAL_NEGATIVE = 168;
  /** RegularExpression Id. */
  int DOUBLE_NEGATIVE = 169;
  /** RegularExpression Id. */
  int EXPONENT = 170;
  /** RegularExpression Id. */
  int QUOTE_3D = 171;
  /** RegularExpression Id. */
  int QUOTE_3S = 172;
  /** RegularExpression Id. */
  int ECHAR = 173;
  /** RegularExpression Id. */
  int UCHAR = 174;
  /** RegularExpression Id. */
  int UCHAR4 = 175;
  /** RegularExpression Id. */
  int UCHAR8 = 176;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 177;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 178;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 179;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 180;
  /** RegularExpression Id. */
  int LPAREN = 181;
  /** RegularExpression Id. */
  int RPAREN = 182;
  /** RegularExpression Id. */
  int NIL = 183;
  /** RegularExpression Id. */
  int LBRACE = 184;
  /** RegularExpression Id. */
  int RBRACE = 185;
  /** RegularExpression Id. */
  int LBRACKET = 186;
  /** RegularExpression Id. */
  int RBRACKET = 187;
  /** RegularExpression Id. */
  int ANON = 188;
  /** RegularExpression Id. */
  int SEMICOLON = 189;
  /** RegularExpression Id. */
  int COMMA = 190;
  /** RegularExpression Id. */
  int DOT = 191;
  /** RegularExpression Id. */
  int EQ = 192;
  /** RegularExpression Id. */
  int NE = 193;
  /** RegularExpression Id. */
  int GT = 194;
  /** RegularExpression Id. */
  int LT = 195;
  /** RegularExpression Id. */
  int LE = 196;
  /** RegularExpression Id. */
  int GE = 197;
  /** RegularExpression Id. */
  int GT2 = 198;
  /** RegularExpression Id. */
  int LT2 = 199;
  /** RegularExpression Id. */
  int L_ANN = 200;
  /** RegularExpression Id. */
  int R_ANN = 201;
  /** RegularExpression Id. */
  int BANG = 202;
  /** RegularExpression Id. */
  int TILDE = 203;
  /** RegularExpression Id. */
  int COLON = 204;
  /** RegularExpression Id. */
  int SC_OR = 205;
  /** RegularExpression Id. */
  int SC_AND = 206;
  /** RegularExpression Id. */
  int PLUS = 207;
  /** RegularExpression Id. */
  int MINUS = 208;
  /** RegularExpression Id. */
  int STAR = 209;
  /** RegularExpression Id. */
  int SLASH = 210;
  /** RegularExpression Id. */
  int DATATYPE = 211;
  /** RegularExpression Id. */
  int AT = 212;
  /** RegularExpression Id. */
  int ASSIGN = 213;
  /** RegularExpression Id. */
  int VBAR = 214;
  /** RegularExpression Id. */
  int CARAT = 215;
  /** RegularExpression Id. */
  int FPATH = 216;
  /** RegularExpression Id. */
  int RPATH = 217;
  /** RegularExpression Id. */
  int QMARK = 218;
  /** RegularExpression Id. */
  int SURROGATE_PAIR = 219;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 220;
  /** RegularExpression Id. */
  int PN_CHARS_U = 221;
  /** RegularExpression Id. */
  int PN_CHARS = 222;
  /** RegularExpression Id. */
  int PN_PREFIX = 223;
  /** RegularExpression Id. */
  int PN_LOCAL = 224;
  /** RegularExpression Id. */
  int VARNAME = 225;
  /** RegularExpression Id. */
  int PN_LOCAL_ESC = 226;
  /** RegularExpression Id. */
  int PLX = 227;
  /** RegularExpression Id. */
  int HEX = 228;
  /** RegularExpression Id. */
  int PERCENT = 229;
  /** RegularExpression Id. */
  int UNKNOWN = 230;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<WS>",
    "<WSC>",
    "\"\\ufeff\"",
    "<IRIref>",
    "<PNAME_NS>",
    "<PNAME_LN>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"distinct\"",
    "\"reduced\"",
    "\"json\"",
    "\"describe\"",
    "\"construct\"",
    "\"ask\"",
    "\"limit\"",
    "\"offset\"",
    "\"order\"",
    "\"by\"",
    "\"values\"",
    "\"undef\"",
    "\"asc\"",
    "\"desc\"",
    "\"named\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"graph\"",
    "\"optional\"",
    "\"union\"",
    "\"minus\"",
    "\"bind\"",
    "\"service\"",
    "\"LET\"",
    "\"TRIPLE\"",
    "\"isTRIPLE\"",
    "\"SUBJECT\"",
    "\"PREDICATE\"",
    "\"OBJECT\"",
    "\"exists\"",
    "\"not\"",
    "\"as\"",
    "\"group\"",
    "\"having\"",
    "\"separator\"",
    "\"agg\"",
    "\"count\"",
    "\"min\"",
    "\"max\"",
    "\"sum\"",
    "\"avg\"",
    "\"median\"",
    "\"mode\"",
    "\"stdev\"",
    "\"stdev_samp\"",
    "\"stdev_pop\"",
    "\"variance\"",
    "\"var_samp\"",
    "\"var_pop\"",
    "\"sample\"",
    "\"group_concat\"",
    "\"filter\"",
    "\"bound\"",
    "\"coalesce\"",
    "\"in\"",
    "\"if\"",
    "\"bnode\"",
    "\"iri\"",
    "\"uri\"",
    "\"cast\"",
    "\"call\"",
    "\"multi\"",
    "\"shortest\"",
    "\"str\"",
    "\"strlang\"",
    "\"strdt\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"isNumeric\"",
    "\"regex\"",
    "\"sameTerm\"",
    "\"RAND\"",
    "\"ABS\"",
    "\"CEIL\"",
    "\"FLOOR\"",
    "\"ROUND\"",
    "\"MOD\"",
    "\"IDIV\"",
    "\"CONCAT\"",
    "\"SUBSTR\"",
    "\"STRLEN\"",
    "\"REPLACE\"",
    "\"UCASE\"",
    "\"LCASE\"",
    "\"ENCODE_FOR_URI\"",
    "\"CONTAINS\"",
    "\"STRSTARTS\"",
    "\"STRENDS\"",
    "\"STRBEFORE\"",
    "\"STRAFTER\"",
    "\"YEAR\"",
    "\"MONTH\"",
    "\"DAY\"",
    "\"HOURS\"",
    "\"MINUTES\"",
    "\"SECONDS\"",
    "\"TIMEZONE\"",
    "\"TZ\"",
    "\"NOW\"",
    "\"UUID\"",
    "\"STRUUID\"",
    "\"VERSION\"",
    "\"MD5\"",
    "\"SHA1\"",
    "\"SHA224\"",
    "\"SHA256\"",
    "\"SHA384\"",
    "\"SHA512\"",
    "\"true\"",
    "\"false\"",
    "\"data\"",
    "\"insert\"",
    "\"delete\"",
    "<INSERT_DATA>",
    "<DELETE_DATA>",
    "<DELETE_WHERE>",
    "\"load\"",
    "\"clear\"",
    "\"create\"",
    "\"add\"",
    "\"move\"",
    "\"copy\"",
    "\"meta\"",
    "\"silent\"",
    "\"drop\"",
    "\"into\"",
    "\"to\"",
    "\"default\"",
    "\"all\"",
    "\"with\"",
    "\"using\"",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<INTEGER_POSITIVE>",
    "<DECIMAL_POSITIVE>",
    "<DOUBLE_POSITIVE>",
    "<INTEGER_NEGATIVE>",
    "<DECIMAL_NEGATIVE>",
    "<DOUBLE_NEGATIVE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<UCHAR>",
    "<UCHAR4>",
    "<UCHAR8>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "\"(\"",
    "\")\"",
    "<NIL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\">>\"",
    "\"<<\"",
    "\"{|\"",
    "\"|}\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^^\"",
    "\"@\"",
    "\":=\"",
    "\"|\"",
    "\"^\"",
    "\"->\"",
    "\"<-\"",
    "\"?\"",
    "<SURROGATE_PAIR>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<VARNAME>",
    "<PN_LOCAL_ESC>",
    "<PLX>",
    "<HEX>",
    "<PERCENT>",
    "<UNKNOWN>",
  };

}
