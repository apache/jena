/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options
{
  // Use \ u escapes in streams AND use a reader for the query
  // => get both raw and escaped unicode

   JAVA_UNICODE_ESCAPE   = true ;
   UNICODE_INPUT         = false ;

  STATIC                = false ;
//   DEBUG_PARSER          = true ;
//   DEBUG_TOKEN_MANAGER   = true ;
}

PARSER_BEGIN(CDTLiteralParser)
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.cdt.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.jena.cdt.*;
import org.apache.jena.graph.Node;

import static org.apache.jena.riot.lang.extra.LangParserLib.*;

public class CDTLiteralParser extends CDTLiteralParserBase
{
}
PARSER_END(CDTLiteralParser)

// --- Entry point for cdt:List literals

List<CDTValue> List() : { List<CDTValue> l = new ArrayList<CDTValue>(); }
{
  <LBRACKET>

  ( NonEmptyListContent(l) )?

  <RBRACKET>

  { return l; }
}

void NonEmptyListContent(List<CDTValue> l) : { }
{
  ListElement(l)

  (  <COMMA> ListElement(l)  )*
}

void ListElement(List<CDTValue> l) : { String iri; Node n; List<CDTValue> subList; Map<CDTKey,CDTValue> m; }
{
  iri = IRI_REF()       { n = createURI(iri, token.beginLine, token.beginColumn);  l.add( CDTFactory.createValue(n) ); }
|
  n = BlankNode()       { l.add( CDTFactory.createValue(n) ); }
| 
  n = RDFLiteral()      { l.add( CDTFactory.createValue(n) ); }
|
  n = NumericLiteral()  { l.add( CDTFactory.createValue(n) ); }
|
  n = BooleanLiteral()  { l.add( CDTFactory.createValue(n) ); }
|
  <NULL>                { l.add( CDTFactory.getNullValue() ); }
|
  subList = List()      { l.add( CDTFactory.createValue(subList) ); }
|
  m = Map()             { l.add( CDTFactory.createValue(m) ); }
}

// --- Entry point for cdt:Map literals

Map<CDTKey,CDTValue> Map() : { Map<CDTKey,CDTValue> m = new HashMap<CDTKey,CDTValue>(); }
{
  <LBRACE>

  ( NonEmptyMapContent(m) )?

  <RBRACE>

  { return m; }
}

void NonEmptyMapContent(Map<CDTKey,CDTValue> m) : { }
{
  MapEntry(m)

  ( <COMMA> MapEntry(m) )*
}

void MapEntry(Map<CDTKey,CDTValue> m) : { CDTKey key; CDTValue value; }
{
  key = MapKey()

  <COLON>

  value = MapValue()

  {
    final CDTValue oldValue = m.put(key, value);
    if ( oldValue != null ) throw new ParseException("map with non-unique key (" + key.toString() + ")");
  }
}

CDTKey MapKey() : { String iri; Node n; }
{
  iri = IRI_REF()       { n = createURI(iri, token.beginLine, token.beginColumn);  return CDTFactory.createKey(n); }
|
  n = RDFLiteral()      { return CDTFactory.createKey(n); }
|
  n = NumericLiteral()  { return CDTFactory.createKey(n); }
|
  n = BooleanLiteral()  { return CDTFactory.createKey(n); }
}

CDTValue MapValue() : { String iri; Node n; List<CDTValue> subList; Map<CDTKey,CDTValue> m; }
{
  iri = IRI_REF()       { n = createURI(iri, token.beginLine, token.beginColumn);  return CDTFactory.createValue(n); }
|
  n = BlankNode()       { return CDTFactory.createValue(n); }
| 
  n = RDFLiteral()      { return CDTFactory.createValue(n); }
|
  n = NumericLiteral()  { return CDTFactory.createValue(n); }
|
  n = BooleanLiteral()  { return CDTFactory.createValue(n); }
|
  <NULL>                { return CDTFactory.getNullValue(); }
|
  subList = List()      { return CDTFactory.createValue(subList); }
|
  m = Map()             { return CDTFactory.createValue(m); }
}


// ---- Basic terms

String IRI_REF() : { Token t ; }
{
  t = <IRIref>
  { return resolveQuotedIRI(t.image, t.beginLine, t.beginColumn) ; }
}

Node BlankNode() :  { Token t = null ; }
{
  t = <BLANK_NODE_LABEL>

  {
    return createBNode(t.image, t.beginLine, t.beginColumn);
  }
}

Node NumericLiteral() : { Token t ; }
{
  t = <INTEGER> { return createLiteralInteger(t.image, t.beginLine, t.beginColumn); }
| t = <DECIMAL> { return createLiteralDecimal(t.image, t.beginLine, t.beginColumn); }
| t = <DOUBLE>  { return createLiteralDouble(t.image, t.beginLine, t.beginColumn); }
}

Node BooleanLiteral() : {}
{
   <TRUE> { return XSD_TRUE; }
  |
   <FALSE> { return XSD_FALSE; }
}

Node RDFLiteral() : { String lex = null ; }
{
  lex = String()
  // Optional lang tag and datatype.
  { String lang = null ; String dt = null ; }
  (
    lang = Langtag()
  |
    ( <DATATYPE> dt = IRI_REF() )  // divergence from the Turtle parser here; instead of IRIref(), we only permit IRI_REF()
  )?

  {
    return createLiteral(lex, lang, dt, token.beginLine, token.beginColumn);
  }
} 

String Langtag() : { Token t ; }
{
  t = <LANGTAG> // divergence from the Turtle parser here, which also permits AnyDirective() at this point
  { String lang = stripChars(t.image, 1) ; return lang ; }
}

String String() : { Token t ;  String lex ; }
{
  ( t = <STRING_LITERAL1> { lex = stripQuotes(t.image) ; }
  | t = <STRING_LITERAL2> { lex = stripQuotes(t.image) ; }
  | t = <STRING_LITERAL_LONG1> { lex = stripQuotes3(t.image) ; }
  | t = <STRING_LITERAL_LONG2> { lex = stripQuotes3(t.image) ; }
  )
    { lex = unescapeStr(lex,  t.beginLine, t.beginColumn) ;
      return lex ;
    }
}


// ------------------------------------------
// Tokens

// Comments and whitespace

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN: { <#WS: " " | "\t" | "\n" | "\r" | "\f"> }


// -------------------------------------------------
// Keywords

TOKEN [IGNORE_CASE] :
{
  < TRUE:        "true" >
| < FALSE:       "false" >

// -------------------------------------------------

|   < INTEGER: (["-","+"])? <DIGITS> >
|
   < DECIMAL: (["-","+"])? 
              ((<DIGITS>)+ "." (<DIGITS>)* | "." (<DIGITS>)+)
   >
      // Required exponent.
|  < DOUBLE:
      (["+","-"])?
      ( 
        (["0"-"9"])+ "." (["0"-"9"])* <EXPONENT>
        | "." (["0"-"9"])+ (<EXPONENT>)
        | (["0"-"9"])+ <EXPONENT>
      )
      >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #QUOTE_3D: "\"\"\"">
| < #QUOTE_3S: "'''">
// "u" done by javacc input stream.  
// "U" escapes not supported yet for Java strings
| <ECHAR: "\\" ("t"|"b"|"n"|"r"|"f"|"\\"|"\""|"'")>

| < STRING_LITERAL1: 
      // Single quoted string
      "'" ( (~["'","\\","\n","\r"]) | <ECHAR> )* "'" > 

| < STRING_LITERAL2:
    // Double quoted string
      "\"" ( (~["\"","\\","\n","\r"]) | <ECHAR> )* "\"" >

| < STRING_LITERAL_LONG1:
     <QUOTE_3S> 
      ( ~["'","\\"] | <ECHAR> | ("'" ~["'"]) | ("''" ~["'"]))*
     <QUOTE_3S> >

| < STRING_LITERAL_LONG2: 
     <QUOTE_3D> 
      ( ~["\"","\\"] | <ECHAR> | ("\"" ~["\""]) | ("\"\"" ~["\""]))*
     <QUOTE_3D> >
| < DIGITS: (["0"-"9"])+>
// | <HEX: ["0"-"9"] | ["A"-"F"] | ["a"-"f"]>
}

TOKEN:
{
   // Includes # for relative URIs
   <IRIref: "<" (~[ ">","<", "\"", "{", "}", "^", "\\", "|", "`",
                      "\u0000"-"\u0020"])* ">" >
|  <BLANK_NODE_LABEL: "_:" <PN_LOCAL> >
|  <LANGTAG: <AT> (<A2Z>)+("-" (<A2ZN>)+)* >
|  <#A2Z: ["a"-"z","A"-"Z"]>
|  <#A2ZN: ["a"-"z","A"-"Z","0"-"9"]>
}


TOKEN :
{
  < NULL:      "null" >

| < LBRACE:    "{" >
| < RBRACE:    "}" >

| < LBRACKET:  "[" >
| < RBRACKET:  "]" >

| < COMMA:     "," >
| < COLON:     ":" >
}

// Operator

TOKEN :
{
  < DATATYPE: "^^">
| < AT: "@">
}

TOKEN:
{
  <#PN_CHARS_BASE:
          ["A"-"Z"] | ["a"-"z"] |
          ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u02FF"] |
          ["\u0370"-"\u037D"] | ["\u037F"-"\u1FFF"] |
          ["\u200C"-"\u200D"] | ["\u2070"-"\u218F"] | ["\u2C00"-"\u2FEF"] |
          ["\u3001"-"\uD7FF"] | ["\uF900"-"\uFFFD"]
          >
          // [#x10000-#xEFFFF]
|
  <#PN_CHARS_U: <PN_CHARS_BASE> | "_" >
|
// No DOT
  <#PN_CHARS: (<PN_CHARS_U> | "-" | ["0"-"9"] | "\u00B7" |
              ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"] ) >
|
  // With a leading "_", no dot at end of local name.
  <#PN_LOCAL: (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS>|".")* <PN_CHARS>)? >
}

// Catch-all tokens.  Must be last.  
// Any non-whitespace.  Causes a parser exception, rather than a
// token manager error (with hidden line numbers).
// Only bad IRIs (e.g. spaces) now give unhelpful parse errors.
TOKEN:
{
  <#UNKNOWN: (~[" ","\t","\n","\r","\f" ])+ >
}

/*
# Local Variables:
# tab-width: 4
# indent-tabs-mode: nil
# comment-default-style: "//"
# End:
*/
