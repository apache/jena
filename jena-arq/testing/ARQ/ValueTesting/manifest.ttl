#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# $Id: manifest.n3,v 1.3 2006/07/14 15:59:33 andy_seaborne Exp $

@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix dawgt:   <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#> .
@prefix mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#> .

<>  rdf:type mf:Manifest ;
    rdfs:comment "Value Testing Tests" ;
    mf:entries
    ([  mf:name    "extendedType-eq-pass" ;
        rdfs:comment
            "Only extended types with identical lexical and datatypes can be tested for = ." ;
        mf:action
            [ qt:data   <extendedType-0.n3> ;
              qt:query  <extendedType-eq-pass.rq> ] ;
        mf:result  <extendedType-eq-pass-result.n3> ;
        dawgt:approval dawgt:Approved ;
	dawgt:approvedBy <http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0175>
      ]

     [  mf:name    "extendedType-ne-fail" ;
        rdfs:comment
            "Opaque types can not be tested for != ." ;
        rdfs:seeAlso
            <http://www.w3.org/2005/04/26-dawg-irc#T15-21-30> ;
        mf:action
            [ qt:data   <extendedType-0.n3> ;
              qt:query  <extendedType-ne-fail.rq> ] ;
        mf:result  <extendedType-ne-fail-result.n3> ;
        dawgt:approval dawgt:Approved ;
	dawgt:approvedBy <http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0175>
      ]

     [  mf:name    "extendedType-literal-eq" ;
        rdfs:comment
            "Test FILTER match on extended type." ;
        mf:action
            [ qt:data   <extendedType-0.n3> ;
              qt:query  <extendedType-literal-eq.rq> ] ;
        mf:result  <extendedType-literal-eq-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "extendedType-literal-ne" ;
        rdfs:comment
            "Test FILTER negative match on extended type." ;
        mf:action
            [ qt:data   <extendedType-0.n3> ;
              qt:query  <extendedType-literal-ne.rq> ] ;
        mf:result  <extendedType-literal-ne-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "extendedType-graph" ;
        rdfs:comment
            "Test graph match on extended type." ;
        mf:action
            [ qt:data   <extendedType-0.n3> ;
              qt:query  <extendedType-graph.rq> ] ;
        mf:result  <extendedType-graph-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "typePromotion-decimal-decimal-pass" ;
        rdfs:comment
            "Positive test: product of type promotion within the xsd:decimal type tree." ;
        mf:action
            [ qt:data   <typePromotion-0.n3> ;
              qt:query  <typePromotion-decimal-decimal-pass.rq> ] ;
        mf:result  <typePromotion-decimal-decimal-pass-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  
    	mf:name    "typePromotion-decimal-decimal-fail" ;
        rdfs:comment
            "Negative test: product of type promotion within the xsd:decimal type tree." ;
        mf:action
            [ qt:data   <typePromotion-0.n3> ;
              qt:query  <typePromotion-decimal-decimal-fail.rq> ] ;
        mf:result  <typePromotion-decimal-decimal-fail-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-equiv-FALSE" ;
        rdfs:comment
            "FALSE = legal boolean values." ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-equiv-FALSE.rq> ] ;
        mf:result  <boolean-equiv-FALSE-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-equiv-TRUE" ;
        rdfs:comment
            "TRUE = legal boolean values." ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-equiv-TRUE.rq> ] ;
        mf:result  <boolean-equiv-TRUE-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-equiv-xsdType" ;
        rdfs:comment
            "Various lexical forms of xsd:boolean equal each other." ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-equiv-xsdType.rq> ] ;
        mf:result  <boolean-equiv-xsdType-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-logical-OR" ;
        rdfs:comment
            "Various lexical forms of xsd:boolean equal an EBV." ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-logical-OR.rq> ] ;
        mf:result  <boolean-logical-OR-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-false-canonical" ;
        rdfs:comment
            "Lexical form of FALSE" ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-false-canonical.rq> ] ;
        mf:result  <boolean-false-canonical-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-true-canonical" ;
        rdfs:comment
            "Lexical form of TRUE" ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-true-canonical.rq> ] ;
        mf:result  <boolean-true-canonical-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]

     [  mf:name    "boolean-EBV-canonical" ;
        rdfs:comment
            "Lexical form of EBV" ;
        mf:action
            [ qt:data   <boolean-0.n3> ;
              qt:query  <boolean-EBV-canonical.rq> ] ;
        mf:result  <boolean-EBV-canonical-result.n3> ;
        dawgt:approval dawgt:NotApproved
      ]
      [ mf:name    "xsd-string-lt" ;
        rdfs:comment
            "FILTER with < on xsd:string" ;
        mf:action
            [ qt:data   <xsd-string-data.n3> ;
              qt:query  <xsd-string-lt.rq> ] ;
        mf:result <xsd-string-lt-result.rdf> 
      ]
      [ mf:name    "xsd-string-gt" ;
        rdfs:comment
            "FILTER with > on xsd:string" ;
        mf:action
            [ qt:data   <xsd-string-data.n3> ;
              qt:query  <xsd-string-gt.rq> ] ;
        mf:result <xsd-string-gt-result.rdf>
      ]
            

    # End of tests
   ).
