/* ShaclCompactParserJJTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ShaclCompactParserJJTokenManager.java */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.shacl.compact.reader.parser;
import java.util.List;
import java.util.ArrayList;
import org.apache.jena.graph.*;
import org.apache.jena.sparql.path.*;
import org.apache.jena.shacl.compact.reader.*;
import static org.apache.jena.riot.lang.extra.LangParserLib.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ShaclCompactParserJJTokenManager implements ShaclCompactParserJJConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 48;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 49;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 73;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 74;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 71;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 62;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 46:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 47:
         jjmatchedKind = 70;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 72;
         return jjMoveNfa_0(0, 0);
      case 63:
         jjmatchedKind = 69;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400000000000c8L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x80000000000110L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 91:
         jjmatchedKind = 77;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 78;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40010000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x300020022000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000004000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000280000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1808000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1f88000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000040000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000002000000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x1e000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x600000000004000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000001e00L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 123:
         jjmatchedKind = 75;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 64;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 76;
         return jjMoveNfa_0(0, 0);
      case 65279:
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000000000000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000000000110L);
      case 94:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x104008010b621e00L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30180000e000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20980020L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x440100c8L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x900060000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 73:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x60001e0040120c8L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000040000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x88980000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e00L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40101920008000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020020L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000010000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x1600000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000100L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200010020000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000002000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000044020L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0xc001e00L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1e000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0xc8L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000080000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000001840018000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100008000L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000043801e00L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10001e000000000L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0xc8L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80100080004120L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x22000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200408000000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0xc8L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      case 88:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000780000L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x480000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1e000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100020046000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200100000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000001e00L);
      case 120:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000400000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 83:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x9800000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1e000000100L);
      case 108:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000780000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20040000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0xc8L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000020000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000004000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000400002000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0xc8L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1e008000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100001800100L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x780800L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000001000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1e000000200L);
      case 101:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x1c0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 106:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000780000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0L);
      case 83:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
         }
         break;
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x12000000000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x2400L);
      case 103:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 9;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x780000L);
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 9;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100080000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000100L);
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1a000000100L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 10;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 10;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x780000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x12000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L);
      case 113:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0xc000000000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x13000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 73:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 13;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x12000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0xc000000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000080L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0x12000000000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L);
      case 102:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 14;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0xc000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 15;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0x12000000000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0xc000000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 15;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x12000000080L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 16;
         }
         break;
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 16;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 16;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 17;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x12000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 21);
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 22);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 22);
   }
   switch(curChar)
   {
      case 106:
         return jjMoveStringLiteralDfa24_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 23);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 23);
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 24);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 24);
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 25);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 25);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 25);
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 26);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 26);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 26);
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 27;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 27);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0xf000000L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0xf0000000L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 210;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(191, 193); }
                  else if (curChar == 58)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAddStates(12, 15); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 80;
                  else if (curChar == 60)
                     { jjCheckNAddStates(16, 18); }
                  else if (curChar == 35)
                  {
                     if (kind > 52)
                        kind = 52;
                     { jjCheckNAddStates(19, 21); }
                  }
                  if (curChar == 34)
                     { jjCheckNAddStates(22, 24); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddStates(19, 21); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 3:
                  if (curChar == 10 && kind > 52)
                     kind = 52;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 7:
                  if (curChar == 62 && kind > 79)
                     kind = 79;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if (curChar == 39)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 24:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (curChar == 34)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 41:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 42:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if (curChar == 39)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 59:
               case 62:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(60, 63); }
                  break;
               case 60:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 61:
                  if (curChar == 39)
                     { jjAddStates(32, 33); }
                  break;
               case 64:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 79:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 81:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 34)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 83:
               case 86:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(84, 87); }
                  break;
               case 84:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 85:
                  if (curChar == 34)
                     { jjAddStates(38, 39); }
                  break;
               case 88:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 34 && kind > 93)
                     kind = 93;
                  break;
               case 103:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 105:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 107:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(40, 42); }
                  break;
               case 108:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if (curChar == 58 && kind > 80)
                     kind = 80;
                  break;
               case 113:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(43, 45); }
                  break;
               case 114:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 58)
                     { jjCheckNAddStates(12, 15); }
                  break;
               case 116:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 117:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 118:
                  if ((0x7ff200000000000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 122:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 123:
                  if (curChar == 37)
                     { jjAddStates(51, 52); }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 128:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 131:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 132:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 143:
                  if (curChar != 58)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAddStates(12, 15); }
                  break;
               case 146:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(53, 55); }
                  break;
               case 147:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if (curChar == 58 && kind > 82)
                     kind = 82;
                  break;
               case 155:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(56, 58); }
                  break;
               case 156:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
                  if (curChar == 58)
                     { jjAddStates(59, 62); }
                  break;
               case 158:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 159:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 160:
                  if ((0x7ff200000000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 164:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 165:
                  if (curChar == 37)
                     { jjAddStates(68, 69); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 170:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 173:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 174:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 185:
                  if (curChar == 45)
                     { jjCheckNAdd(186); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddTwoStates(185, 186); }
                  break;
               case 187:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(188); }
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(189, 190); }
                  break;
               case 190:
                  if (curChar == 46)
                     { jjCheckNAdd(191); }
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAdd(191); }
                  break;
               case 192:
                  if (curChar == 46)
                     { jjCheckNAdd(193); }
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(193, 194); }
                  break;
               case 195:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(196); }
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(196); }
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(70, 73); }
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(198, 199); }
                  break;
               case 199:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 202:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(203); }
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(203); }
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(204, 205); }
                  break;
               case 206:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(207); }
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(207); }
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 209:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(191, 193); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(74, 81); }
                  else if (curChar == 64)
                     { jjCheckNAddStates(82, 88); }
                  break;
               case 1:
                  if (kind > 52)
                     kind = 52;
                  { jjAddStates(19, 21); }
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjAddStates(89, 90); }
                  break;
               case 9:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 25:
                  if (curChar == 92)
                     { jjAddStates(91, 93); }
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 27:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 36:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 43:
                  if (curChar == 92)
                     { jjAddStates(94, 96); }
                  break;
               case 44:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 45:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 63:
                  if (curChar == 92)
                     { jjAddStates(97, 99); }
                  break;
               case 64:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 65:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 74:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 84:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 87:
                  if (curChar == 92)
                     { jjAddStates(100, 102); }
                  break;
               case 88:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 89:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 98:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 106:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(74, 81); }
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 116:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 121:
                  if (curChar == 92)
                     { jjAddStates(103, 104); }
                  break;
               case 122:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 124:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x7e0000007eL & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 128:
                  if ((0x4000000080000001L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 130:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 133:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 144:
                  if (curChar == 64)
                     { jjCheckNAddStates(82, 88); }
                  break;
               case 145:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 108); }
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(148); }
                  break;
               case 154:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(109, 112); }
                  break;
               case 155:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 156:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(157); }
                  break;
               case 158:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 159:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 160:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 163:
                  if (curChar == 92)
                     { jjAddStates(113, 114); }
                  break;
               case 164:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 166:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 168:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x7e0000007eL & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 170:
                  if ((0x4000000080000001L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 172:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 173:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 175:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 176:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 184:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddTwoStates(184, 185); }
                  break;
               case 186:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddTwoStates(185, 186); }
                  break;
               case 194:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(115, 116); }
                  break;
               case 201:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(117, 118); }
                  break;
               case 205:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(119, 120); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(74, 81); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjAddStates(121, 122); }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjAddStates(19, 21); }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(16, 18); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(25, 27); }
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(22, 24); }
                  break;
               case 60:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(28, 31); }
                  break;
               case 84:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(34, 37); }
                  break;
               case 106:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(74, 81); }
                  break;
               case 107:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 108:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(109); }
                  break;
               case 110:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(123, 124); }
                  break;
               case 111:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 112:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(109); }
                  break;
               case 113:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 114:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(115); }
                  break;
               case 116:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 117:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 118:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 119:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjAddStates(125, 126); }
                  break;
               case 120:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(46, 50); }
                  break;
               case 129:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 135:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if (!jjCanMove_10(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(46, 50); }
                  break;
               case 137:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjAddStates(127, 128); }
                  break;
               case 138:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 139:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(115); }
                  break;
               case 140:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjAddStates(121, 122); }
                  break;
               case 141:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(129, 132); }
                  break;
               case 142:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(133, 136); }
                  break;
               case 145:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(105, 108); }
                  break;
               case 146:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 147:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(148); }
                  break;
               case 149:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                     { jjAddStates(137, 138); }
                  break;
               case 150:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 151:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(148); }
                  break;
               case 152:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(105, 108); }
                  break;
               case 154:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(109, 112); }
                  break;
               case 155:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 156:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(157); }
                  break;
               case 158:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 159:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 160:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 161:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(139, 140); }
                  break;
               case 162:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 171:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 177:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 178:
                  if (!jjCanMove_26(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddStates(63, 67); }
                  break;
               case 179:
                  if (jjCanMove_27(hiByte, i1, i2, l1, l2))
                     { jjAddStates(141, 142); }
                  break;
               case 180:
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 181:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(157); }
                  break;
               case 182:
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 183:
                  if (jjCanMove_31(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(109, 112); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 210 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\55\76", "\56\56", "\102\154\141\156\153\116\157\144\145", 
"\111\122\111", "\114\151\164\145\162\141\154", 
"\102\154\141\156\153\116\157\144\145\117\162\111\122\111", "\102\154\141\156\153\116\157\144\145\117\162\114\151\164\145\162\141\154", 
"\111\122\111\117\162\114\151\164\145\162\141\154", "\164\141\162\147\145\164\116\157\144\145", 
"\164\141\162\147\145\164\117\142\152\145\143\164\163\117\146", "\164\141\162\147\145\164\123\165\142\152\145\143\164\163\117\146", 
"\164\141\162\147\145\164\103\154\141\163\163", "\144\145\141\143\164\151\166\141\164\145\144", 
"\163\145\166\145\162\151\164\171", "\155\145\163\163\141\147\145", "\143\154\141\163\163", 
"\144\141\164\141\164\171\160\145", "\156\157\144\145\113\151\156\144", 
"\155\151\156\105\170\143\154\165\163\151\166\145", "\155\151\156\111\156\143\154\165\163\151\166\145", 
"\155\141\170\105\170\143\154\165\163\151\166\145", "\155\141\170\111\156\143\154\165\163\151\166\145", 
"\155\151\156\114\145\156\147\164\150", "\155\141\170\114\145\156\147\164\150", "\160\141\164\164\145\162\156", 
"\146\154\141\147\163", "\154\141\156\147\165\141\147\145\111\156", "\145\161\165\141\154\163", 
"\144\151\163\152\157\151\156\164", "\143\154\157\163\145\144", 
"\151\147\156\157\162\145\144\120\162\157\160\145\162\164\151\145\163", "\150\141\163\126\141\154\165\145", "\151\156", 
"\165\156\151\161\165\145\114\141\156\147", "\154\145\163\163\124\150\141\156", 
"\154\145\163\163\124\150\141\156\117\162\105\161\165\141\154\163", 
"\161\165\141\154\151\146\151\145\144\126\141\154\165\145\123\150\141\160\145", "\161\165\141\154\151\146\151\145\144\115\151\156\103\157\165\156\164", 
"\161\165\141\154\151\146\151\145\144\115\141\170\103\157\165\156\164", 
"\161\165\141\154\151\146\151\145\144\126\141\154\165\145\123\150\141\160\145\163\104\151\163\152\157\151\156\164", "\147\162\157\165\160", "\157\162\144\145\162", "\156\141\155\145", 
"\144\145\163\143\162\151\160\164\151\157\156", "\144\145\146\141\165\154\164\126\141\154\165\145", "\136\136", null, null, 
null, null, null, null, "\ufeff", null, null, null, null, null, null, null, null, 
"\53", "\55", "\174", "\100", "\136", "\56", "\41", "\77", "\57", "\52", "\75", 
"\50", "\51", "\173", "\175", "\133", "\135", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   188, 189, 190, 198, 199, 204, 205, 188, 189, 190, 192, 197, 116, 130, 132, 135, 
   6, 7, 8, 1, 2, 4, 41, 42, 43, 23, 24, 25, 59, 60, 61, 63, 
   62, 79, 83, 84, 85, 87, 86, 103, 107, 108, 110, 113, 114, 137, 117, 118, 
   119, 121, 123, 124, 126, 146, 147, 149, 155, 156, 179, 158, 172, 174, 177, 159, 
   160, 161, 163, 165, 166, 168, 198, 199, 204, 205, 107, 108, 109, 113, 114, 115, 
   137, 110, 145, 152, 148, 154, 182, 157, 184, 9, 18, 26, 27, 36, 44, 45, 
   54, 64, 65, 74, 88, 89, 98, 122, 128, 146, 147, 148, 149, 155, 156, 157, 
   179, 164, 170, 195, 196, 202, 203, 206, 207, 141, 142, 111, 112, 120, 129, 138, 
   139, 107, 108, 109, 110, 113, 114, 115, 137, 150, 151, 162, 171, 180, 181, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_21(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_22(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_23(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_24(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_25(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_26(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_27(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_28(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_29(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_30(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_31(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec14[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ShaclCompactParserJJTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ShaclCompactParserJJTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 210; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xdfe07fffffffffffL, 0xbbc0fffffL, 
};
static final long[] jjtoSkip = {
   0x1f800000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x10000000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[210];
    private final int[] jjstateSet = new int[2 * 210];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
